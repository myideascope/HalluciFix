name: Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_run:
    workflows: ["Comprehensive Test Suite", "Coverage Analysis", "Performance Monitoring", "Security Scanning"]
    types: [completed]
  workflow_dispatch:
    inputs:
      emergency_override:
        description: 'Emergency override (requires approval)'
        required: false
        default: false
        type: boolean
      override_reason:
        description: 'Reason for emergency override'
        required: false
        type: string

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  NODE_VERSION: '20'

jobs:
  # Collect all quality data
  collect-quality-data:
    name: Collect Quality Data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download workflow artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get recent workflow runs
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'test.yml',
              per_page: 5
            });
            
            // Download artifacts from the most recent successful run
            for (const run of runs.workflow_runs) {
              if (run.status === 'completed' && run.conclusion === 'success') {
                try {
                  const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id
                  });
                  
                  console.log(`Found ${artifacts.artifacts.length} artifacts from run ${run.id}`);
                  
                  // Create artifacts directory
                  if (!fs.existsSync('downloaded-artifacts')) {
                    fs.mkdirSync('downloaded-artifacts', { recursive: true });
                  }
                  
                  // Note: In a real implementation, you would download and extract artifacts here
                  // For now, we'll create placeholder files to simulate the data
                  
                  break;
                } catch (error) {
                  console.log(`Failed to process run ${run.id}: ${error.message}`);
                }
              }
            }

      - name: Create mock quality data for demonstration
        run: |
          # Create mock data directories
          mkdir -p test-results coverage-reports performance-report security-results
          
          # Mock test results
          cat > test-results/unit-results.json << 'EOF'
          {
            "numTotalTests": 150,
            "numPassedTests": 148,
            "numFailedTests": 2,
            "testResults": []
          }
          EOF
          
          cat > test-results/integration-results.json << 'EOF'
          {
            "numTotalTests": 45,
            "numPassedTests": 45,
            "numFailedTests": 0,
            "testResults": []
          }
          EOF
          
          # Mock coverage data (this would normally come from coverage-analysis workflow)
          cat > coverage-reports/latest-coverage-report.json << 'EOF'
          {
            "summary": {
              "global": {
                "lines": { "pct": 85.2 },
                "functions": { "pct": 82.1 },
                "branches": { "pct": 78.5 },
                "statements": { "pct": 84.8 }
              }
            },
            "thresholdResults": {
              "global": { "passed": true, "failures": [] },
              "critical": { "passed": false, "failures": [
                {
                  "module": "src/lib/analysisService.ts",
                  "metric": "lines",
                  "actual": 88.5,
                  "threshold": 90
                }
              ]}
            }
          }
          EOF
          
          # Mock performance data
          cat > performance-report/bundle-metrics.json << 'EOF'
          {
            "total_size": 1800000,
            "js_size": 1200000,
            "css_size": 150000
          }
          EOF
          
          cat > performance-report/api-performance-results.json << 'EOF'
          {
            "average_duration": 1850,
            "max_duration": 3200,
            "successful_tests": 25,
            "total_tests": 25
          }
          EOF
          
          # Mock security data
          cat > security-results/npm-audit-results.json << 'EOF'
          {
            "metadata": {
              "vulnerabilities": {
                "critical": 0,
                "high": 1,
                "moderate": 3,
                "low": 5
              }
            }
          }
          EOF

      - name: Upload collected data
        uses: actions/upload-artifact@v4
        with:
          name: quality-data
          path: |
            test-results/
            coverage-reports/
            performance-report/
            security-results/
          retention-days: 7

  # Evaluate quality gates
  evaluate-gates:
    name: Evaluate Quality Gates
    runs-on: ubuntu-latest
    needs: collect-quality-data
    outputs:
      gates-passed: ${{ steps.evaluation.outputs.gates-passed }}
      deployment-blocked: ${{ steps.evaluation.outputs.deployment-blocked }}
      can-override: ${{ steps.evaluation.outputs.can-override }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download quality data
        uses: actions/download-artifact@v4
        with:
          name: quality-data
          path: ./

      - name: Handle emergency override
        if: github.event.inputs.emergency_override == 'true'
        run: |
          # Create emergency override file
          cat > .emergency-override << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "reason": "${{ github.event.inputs.override_reason || 'Emergency deployment' }}",
            "approver": "${{ github.actor }}",
            "commit": "${{ github.sha }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF
          
          echo "🚨 Emergency override activated by ${{ github.actor }}"
          echo "Reason: ${{ github.event.inputs.override_reason || 'Emergency deployment' }}"

      - name: Evaluate quality gates
        id: evaluation
        run: |
          # Make script executable
          chmod +x scripts/quality-gates.js
          
          # Run quality gates evaluation
          if node scripts/quality-gates.js --fail-on-error; then
            echo "gates-passed=true" >> $GITHUB_OUTPUT
            echo "deployment-blocked=false" >> $GITHUB_OUTPUT
          else
            echo "gates-passed=false" >> $GITHUB_OUTPUT
            
            # Check if deployment is blocked
            if [ -f "quality-reports/latest-quality-gates.json" ]; then
              blocked=$(cat quality-reports/latest-quality-gates.json | jq -r '.deployment.blocked')
              can_override=$(cat quality-reports/latest-quality-gates.json | jq -r '.deployment.canOverride')
              
              echo "deployment-blocked=$blocked" >> $GITHUB_OUTPUT
              echo "can-override=$can_override" >> $GITHUB_OUTPUT
            else
              echo "deployment-blocked=true" >> $GITHUB_OUTPUT
              echo "can-override=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload quality gates report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-gates-report
          path: |
            quality-reports/
            .emergency-override
          retention-days: 30

      - name: Comment on PR with quality gates results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('quality-reports/quality-gates-report.md')) {
              const report = fs.readFileSync('quality-reports/quality-gates-report.md', 'utf8');
              
              // Check for existing quality gates comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const gatesComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('🚦 Quality Gates Report')
              );
              
              if (gatesComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: gatesComment.id,
                  body: report
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: report
                });
              }
            }

  # Deployment gate enforcement
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: evaluate-gates
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download quality gates report
        uses: actions/download-artifact@v4
        with:
          name: quality-gates-report
          path: ./

      - name: Check deployment status
        run: |
          if [ "${{ needs.evaluate-gates.outputs.deployment-blocked }}" == "true" ]; then
            echo "🚫 Deployment blocked by quality gates"
            
            if [ "${{ needs.evaluate-gates.outputs.can-override }}" == "true" ]; then
              echo "⚠️ Emergency override available"
              echo "To override, re-run this workflow with emergency_override=true and provide a reason"
            else
              echo "❌ No override available - all quality gates must pass"
            fi
            
            # Check for active override
            if [ -f ".emergency-override" ]; then
              echo "🚨 Emergency override is active"
              override_reason=$(cat .emergency-override | jq -r '.reason')
              override_approver=$(cat .emergency-override | jq -r '.approver')
              echo "Reason: $override_reason"
              echo "Approved by: $override_approver"
              exit 0
            fi
            
            exit 1
          else
            echo "✅ Deployment allowed - quality gates passed"
          fi

      - name: Set deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const state = '${{ needs.evaluate-gates.outputs.gates-passed }}' === 'true' ? 'success' : 'failure';
            const description = state === 'success' 
              ? '✅ Quality gates passed - deployment allowed' 
              : '❌ Quality gates failed - deployment blocked';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'Quality Gates'
            });

      - name: Create deployment gate issue
        if: failure() && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let reportContent = 'Quality gates evaluation failed';
            if (fs.existsSync('quality-reports/quality-gates-report.md')) {
              reportContent = fs.readFileSync('quality-reports/quality-gates-report.md', 'utf8');
            }
            
            const title = `🚦 Quality Gates Failed - Deployment Blocked - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Quality Gates Failure
            
            Deployment has been blocked due to quality gate failures.
            
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            **Workflow:** ${{ github.workflow }}
            **Run:** ${{ github.run_id }}
            
            ${reportContent}
            
            ## Actions Required
            
            1. Review and fix the failing quality gates
            2. Re-run the workflow after fixes
            3. For emergency deployments, use the emergency override with proper justification
            
            [View Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['quality-gates', 'deployment-blocked', 'critical']
            });

  # Notification and reporting
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [evaluate-gates, deployment-gate]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download quality gates report
        uses: actions/download-artifact@v4
        with:
          name: quality-gates-report
          path: ./

      - name: Generate notification summary
        run: |
          cat > notification-summary.md << 'EOF'
          # 🚦 Quality Gates Summary
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Workflow:** ${{ github.workflow }}
          **Run:** ${{ github.run_id }}
          
          ## Results
          
          - **Gates Passed:** ${{ needs.evaluate-gates.outputs.gates-passed }}
          - **Deployment Blocked:** ${{ needs.evaluate-gates.outputs.deployment-blocked }}
          - **Can Override:** ${{ needs.evaluate-gates.outputs.can-override }}
          
          EOF
          
          # Add detailed report if available
          if [ -f "quality-reports/quality-gates-report.md" ]; then
            echo "## Detailed Report" >> notification-summary.md
            echo "" >> notification-summary.md
            cat quality-reports/quality-gates-report.md >> notification-summary.md
          fi

      - name: Send Slack notification (if configured)
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Send Slack notification about quality gates results
          status_emoji="${{ needs.evaluate-gates.outputs.gates-passed == 'true' && '✅' || '❌' }}"
          status_text="${{ needs.evaluate-gates.outputs.gates-passed == 'true' && 'PASSED' || 'FAILED' }}"
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"${status_emoji} Quality Gates ${status_text}\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Quality Gates ${status_text}*\n\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nCommit: \`${{ github.sha }}\`\"
                  }
                },
                {
                  \"type\": \"actions\",
                  \"elements\": [
                    {
                      \"type\": \"button\",
                      \"text\": {
                        \"type\": \"plain_text\",
                        \"text\": \"View Workflow\"
                      },
                      \"url\": \"${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\"
                    }
                  ]
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL

      - name: Upload notification summary
        uses: actions/upload-artifact@v4
        with:
          name: notification-summary
          path: notification-summary.md
          retention-days: 7