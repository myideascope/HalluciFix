name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

# Security: Set minimal permissions by default
permissions:
  contents: read
  pull-requests: write
  checks: write
  security-events: write

# Define environment variables
env:
  NODE_VERSION: '20'
  CACHE_VERSION: v1

jobs:
  # Job 1: Security and Quality Checks
  security-audit:
    name: Security & Quality Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better security analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run ESLint
        run: npm run lint

  # Job 2: Matrix Testing Strategy
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-audit
    strategy:
      matrix:
        node-version: ['18', '20', '22']
        include:
          # Primary testing environment
          - node-version: '20'
            primary: true
          # Additional test environments
          - node-version: '18'
            primary: false
          - node-version: '22'
            primary: false
      fail-fast: false # Continue testing other versions if one fails

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run unit tests
        run: npm run test -- --coverage --reporter=verbose

      - name: Upload coverage reports (primary only)
        if: matrix.primary == true
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: true

  # Job 3: Build and Artifact Creation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-audit, test]
    strategy:
      matrix:
        environment: [development, production]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Build application (${{ matrix.environment }})
        run: npm run build
        env:
          NODE_ENV: ${{ matrix.environment }}
          # Environment-specific variables would go here
          VITE_APP_ENVIRONMENT: ${{ matrix.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.environment }}-${{ github.sha }}
          path: |
            dist/
            !dist/**/*.map
          retention-days: 30

  # Job 4: Database Migration Testing (for Supabase)
  database-test:
    name: Database Migration Test
    runs-on: ubuntu-latest
    needs: security-audit
    # Only run on main branch or when database files change
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.message, '[db-test]')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Supabase CLI
        run: npm install -g @supabase/cli@latest

      - name: Start Supabase services
        run: supabase start --db-url postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run database tests
        run: supabase test db
        continue-on-error: true # Don't fail the entire pipeline for db tests

  # Job 5: Security Scanning
  security-scan:
    name: Advanced Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript-typescript

  # Job 6: Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    # Only run performance tests on main branch
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-production-${{ github.sha }}
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          npm install -g serve
          serve -s dist -p 3000 &
          sleep 5
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Job 7: Notify on Completion
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [security-audit, test, build, database-test, security-scan, performance-test]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Notify success
        if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ All checks passed! Ready for deployment."
          
      - name: Notify failure
        if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ Pipeline failed. Please check the logs."
          exit 1
