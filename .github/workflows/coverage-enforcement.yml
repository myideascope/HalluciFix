name: Coverage Reporting & Enforcement

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run coverage analysis daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read

env:
  NODE_VERSION: '20'
  COVERAGE_THRESHOLD_GLOBAL: 80
  COVERAGE_THRESHOLD_CRITICAL: 90

jobs:
  # Job 1: Generate Comprehensive Coverage Report
  generate-coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: coverage_test_db
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Setup test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d coverage_test_db -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
        env:
          PGPASSWORD: postgres

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Run integration tests with coverage
        run: npm run test:integration:coverage
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/coverage_test_db
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: test_anon_key

      - name: Merge coverage reports
        run: |
          # Install nyc for coverage merging
          npm install -g nyc
          
          # Create merged coverage directory
          mkdir -p merged-coverage
          
          # Merge coverage files if they exist
          if [ -f "coverage/coverage-final.json" ]; then
            cp coverage/coverage-final.json merged-coverage/
          fi
          
          # Generate comprehensive reports
          npx nyc report --reporter=lcov --reporter=text --reporter=json --reporter=html --temp-dir=merged-coverage --report-dir=coverage-final

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage-final/lcov.info
          flags: comprehensive-coverage
          name: comprehensive-coverage-report
          fail_ci_if_error: true

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: |
            coverage-final/
            coverage/
          retention-days: 30

      - name: Generate coverage summary
        id: coverage-summary
        run: |
          # Extract coverage percentages from the JSON report
          if [ -f "coverage-final/coverage-summary.json" ]; then
            LINES_PCT=$(jq -r '.total.lines.pct' coverage-final/coverage-summary.json)
            FUNCTIONS_PCT=$(jq -r '.total.functions.pct' coverage-final/coverage-summary.json)
            BRANCHES_PCT=$(jq -r '.total.branches.pct' coverage-final/coverage-summary.json)
            STATEMENTS_PCT=$(jq -r '.total.statements.pct' coverage-final/coverage-summary.json)
          else
            LINES_PCT="0"
            FUNCTIONS_PCT="0"
            BRANCHES_PCT="0"
            STATEMENTS_PCT="0"
          fi
          
          echo "lines_pct=$LINES_PCT" >> $GITHUB_OUTPUT
          echo "functions_pct=$FUNCTIONS_PCT" >> $GITHUB_OUTPUT
          echo "branches_pct=$BRANCHES_PCT" >> $GITHUB_OUTPUT
          echo "statements_pct=$STATEMENTS_PCT" >> $GITHUB_OUTPUT

      - name: Check coverage thresholds
        run: |
          LINES_PCT="${{ steps.coverage-summary.outputs.lines_pct }}"
          FUNCTIONS_PCT="${{ steps.coverage-summary.outputs.functions_pct }}"
          BRANCHES_PCT="${{ steps.coverage-summary.outputs.branches_pct }}"
          STATEMENTS_PCT="${{ steps.coverage-summary.outputs.statements_pct }}"
          
          echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Coverage | Threshold | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check lines coverage
          if (( $(echo "$LINES_PCT >= $COVERAGE_THRESHOLD_GLOBAL" | bc -l) )); then
            echo "| Lines | ${LINES_PCT}% | ${COVERAGE_THRESHOLD_GLOBAL}% | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Lines | ${LINES_PCT}% | ${COVERAGE_THRESHOLD_GLOBAL}% | ❌ |" >> $GITHUB_STEP_SUMMARY
            COVERAGE_FAILED=true
          fi
          
          # Check functions coverage
          if (( $(echo "$FUNCTIONS_PCT >= $COVERAGE_THRESHOLD_GLOBAL" | bc -l) )); then
            echo "| Functions | ${FUNCTIONS_PCT}% | ${COVERAGE_THRESHOLD_GLOBAL}% | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Functions | ${FUNCTIONS_PCT}% | ${COVERAGE_THRESHOLD_GLOBAL}% | ❌ |" >> $GITHUB_STEP_SUMMARY
            COVERAGE_FAILED=true
          fi
          
          # Check branches coverage
          if (( $(echo "$BRANCHES_PCT >= $COVERAGE_THRESHOLD_GLOBAL" | bc -l) )); then
            echo "| Branches | ${BRANCHES_PCT}% | ${COVERAGE_THRESHOLD_GLOBAL}% | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Branches | ${BRANCHES_PCT}% | ${COVERAGE_THRESHOLD_GLOBAL}% | ❌ |" >> $GITHUB_STEP_SUMMARY
            COVERAGE_FAILED=true
          fi
          
          # Check statements coverage
          if (( $(echo "$STATEMENTS_PCT >= $COVERAGE_THRESHOLD_GLOBAL" | bc -l) )); then
            echo "| Statements | ${STATEMENTS_PCT}% | ${COVERAGE_THRESHOLD_GLOBAL}% | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Statements | ${STATEMENTS_PCT}% | ${COVERAGE_THRESHOLD_GLOBAL}% | ❌ |" >> $GITHUB_STEP_SUMMARY
            COVERAGE_FAILED=true
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$COVERAGE_FAILED" = true ]; then
            echo "❌ **Coverage thresholds not met!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please increase test coverage before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **All coverage thresholds met!**" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 2: Critical Module Coverage Check
  critical-module-coverage:
    name: Critical Module Coverage Check
    runs-on: ubuntu-latest
    needs: generate-coverage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage-artifacts/

      - name: Check critical module coverage
        run: |
          echo "## 🔍 Critical Module Coverage Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Define critical modules
          CRITICAL_MODULES=(
            "src/lib/analysisService.ts"
            "src/lib/supabase.ts"
            "src/lib/api.ts"
            "src/hooks/useAuth.ts"
            "src/lib/googleDrive.ts"
          )
          
          echo "| Module | Coverage | Threshold | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          CRITICAL_FAILED=false
          
          for module in "${CRITICAL_MODULES[@]}"; do
            if [ -f "coverage-artifacts/coverage-final/coverage-summary.json" ]; then
              # Extract coverage for specific file (simplified - in real implementation would parse JSON properly)
              MODULE_COVERAGE=$(jq -r --arg module "$module" '.[$module].lines.pct // 0' coverage-artifacts/coverage-final/coverage-summary.json 2>/dev/null || echo "0")
              
              if (( $(echo "$MODULE_COVERAGE >= $COVERAGE_THRESHOLD_CRITICAL" | bc -l) )); then
                echo "| $module | ${MODULE_COVERAGE}% | ${COVERAGE_THRESHOLD_CRITICAL}% | ✅ |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| $module | ${MODULE_COVERAGE}% | ${COVERAGE_THRESHOLD_CRITICAL}% | ❌ |" >> $GITHUB_STEP_SUMMARY
                CRITICAL_FAILED=true
              fi
            else
              echo "| $module | N/A | ${COVERAGE_THRESHOLD_CRITICAL}% | ⚠️ |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL_FAILED" = true ]; then
            echo "❌ **Critical module coverage thresholds not met!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Critical modules require ${COVERAGE_THRESHOLD_CRITICAL}% coverage." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **All critical modules meet coverage requirements!**" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Coverage Trend Analysis
  coverage-trend-analysis:
    name: Coverage Trend Analysis
    runs-on: ubuntu-latest
    needs: generate-coverage
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download current coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: current-coverage/

      - name: Download historical coverage data
        uses: actions/cache@v4
        with:
          path: coverage-history/
          key: coverage-history-${{ github.ref }}
          restore-keys: |
            coverage-history-

      - name: Analyze coverage trends
        run: |
          mkdir -p coverage-history
          
          # Extract current coverage metrics
          if [ -f "current-coverage/coverage-final/coverage-summary.json" ]; then
            CURRENT_LINES=$(jq -r '.total.lines.pct' current-coverage/coverage-final/coverage-summary.json)
            CURRENT_FUNCTIONS=$(jq -r '.total.functions.pct' current-coverage/coverage-final/coverage-summary.json)
            CURRENT_BRANCHES=$(jq -r '.total.branches.pct' current-coverage/coverage-final/coverage-summary.json)
            CURRENT_STATEMENTS=$(jq -r '.total.statements.pct' current-coverage/coverage-final/coverage-summary.json)
          else
            CURRENT_LINES="0"
            CURRENT_FUNCTIONS="0"
            CURRENT_BRANCHES="0"
            CURRENT_STATEMENTS="0"
          fi
          
          # Create current entry
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "{\"timestamp\": \"$TIMESTAMP\", \"commit\": \"${{ github.sha }}\", \"lines\": $CURRENT_LINES, \"functions\": $CURRENT_FUNCTIONS, \"branches\": $CURRENT_BRANCHES, \"statements\": $CURRENT_STATEMENTS}" > coverage-history/latest.json
          
          # Append to history file
          if [ -f "coverage-history/history.jsonl" ]; then
            cat coverage-history/latest.json >> coverage-history/history.jsonl
          else
            cat coverage-history/latest.json > coverage-history/history.jsonl
          fi
          
          # Keep only last 100 entries
          tail -n 100 coverage-history/history.jsonl > coverage-history/history.tmp && mv coverage-history/history.tmp coverage-history/history.jsonl
          
          echo "## 📈 Coverage Trend Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Current Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- Lines: ${CURRENT_LINES}%" >> $GITHUB_STEP_SUMMARY
          echo "- Functions: ${CURRENT_FUNCTIONS}%" >> $GITHUB_STEP_SUMMARY
          echo "- Branches: ${CURRENT_BRANCHES}%" >> $GITHUB_STEP_SUMMARY
          echo "- Statements: ${CURRENT_STATEMENTS}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Trend:" >> $GITHUB_STEP_SUMMARY
          
          # Compare with previous entry if available
          if [ $(wc -l < coverage-history/history.jsonl) -gt 1 ]; then
            PREV_ENTRY=$(tail -n 2 coverage-history/history.jsonl | head -n 1)
            PREV_LINES=$(echo "$PREV_ENTRY" | jq -r '.lines')
            
            DIFF=$(echo "$CURRENT_LINES - $PREV_LINES" | bc -l)
            if (( $(echo "$DIFF > 0" | bc -l) )); then
              echo "📈 Coverage increased by ${DIFF}%" >> $GITHUB_STEP_SUMMARY
            elif (( $(echo "$DIFF < 0" | bc -l) )); then
              echo "📉 Coverage decreased by ${DIFF#-}%" >> $GITHUB_STEP_SUMMARY
            else
              echo "➡️ Coverage remained stable" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "📊 First coverage measurement recorded" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Save coverage history
        uses: actions/cache/save@v4
        with:
          path: coverage-history/
          key: coverage-history-${{ github.ref }}-${{ github.sha }}

  # Job 4: Coverage Regression Detection
  coverage-regression-detection:
    name: Coverage Regression Detection
    runs-on: ubuntu-latest
    needs: generate-coverage
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download current coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: current-coverage/

      - name: Checkout base branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Generate base coverage
        run: |
          npm run test:coverage
          mkdir -p base-coverage
          cp -r coverage/* base-coverage/ || true
        env:
          CI: true
        continue-on-error: true

      - name: Compare coverage
        run: |
          echo "## 🔍 Coverage Regression Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract base coverage if available
          if [ -f "base-coverage/coverage-summary.json" ]; then
            BASE_LINES=$(jq -r '.total.lines.pct' base-coverage/coverage-summary.json)
          else
            BASE_LINES="0"
          fi
          
          # Extract current coverage
          if [ -f "current-coverage/coverage-final/coverage-summary.json" ]; then
            CURRENT_LINES=$(jq -r '.total.lines.pct' current-coverage/coverage-final/coverage-summary.json)
          else
            CURRENT_LINES="0"
          fi
          
          # Calculate difference
          DIFF=$(echo "$CURRENT_LINES - $BASE_LINES" | bc -l)
          
          echo "| Metric | Base Branch | PR Branch | Difference |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------------|-----------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lines Coverage | ${BASE_LINES}% | ${CURRENT_LINES}% | ${DIFF}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for significant regression (more than 2% decrease)
          if (( $(echo "$DIFF < -2" | bc -l) )); then
            echo "❌ **Significant coverage regression detected!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Coverage decreased by more than 2%. Please add tests to maintain coverage." >> $GITHUB_STEP_SUMMARY
            exit 1
          elif (( $(echo "$DIFF < 0" | bc -l) )); then
            echo "⚠️ **Minor coverage decrease detected**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Consider adding tests to maintain or improve coverage." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Coverage maintained or improved!**" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 5: Generate Coverage Badge and Reports
  generate-coverage-badge:
    name: Generate Coverage Badge
    runs-on: ubuntu-latest
    needs: [generate-coverage, critical-module-coverage]
    if: github.ref == 'refs/heads/main' && needs.generate-coverage.result == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage-artifacts/

      - name: Generate coverage badge
        run: |
          # Extract coverage percentage
          if [ -f "coverage-artifacts/coverage-final/coverage-summary.json" ]; then
            COVERAGE_PCT=$(jq -r '.total.lines.pct' coverage-artifacts/coverage-final/coverage-summary.json)
          else
            COVERAGE_PCT="0"
          fi
          
          # Determine badge color
          if (( $(echo "$COVERAGE_PCT >= 90" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE_PCT >= 80" | bc -l) )); then
            COLOR="green"
          elif (( $(echo "$COVERAGE_PCT >= 70" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$COVERAGE_PCT >= 60" | bc -l) )); then
            COLOR="orange"
          else
            COLOR="red"
          fi
          
          # Create badge URL
          BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE_PCT}%25-${COLOR}"
          
          echo "Coverage badge URL: $BADGE_URL"
          echo "COVERAGE_BADGE_URL=$BADGE_URL" >> $GITHUB_ENV
          
          # Create coverage report summary
          mkdir -p coverage-reports
          cat > coverage-reports/README.md << EOF
          # Coverage Report
          
          ![Coverage Badge]($BADGE_URL)
          
          ## Summary
          - **Lines Coverage**: ${COVERAGE_PCT}%
          - **Generated**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)
          - **Commit**: ${{ github.sha }}
          
          ## Detailed Reports
          - [HTML Report](./coverage-final/index.html)
          - [LCOV Report](./coverage-final/lcov.info)
          - [JSON Report](./coverage-final/coverage-summary.json)
          
          ## Thresholds
          - Global: ${COVERAGE_THRESHOLD_GLOBAL}%
          - Critical Modules: ${COVERAGE_THRESHOLD_CRITICAL}%
          EOF

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-final
          path: |
            coverage-artifacts/
            coverage-reports/
          retention-days: 90