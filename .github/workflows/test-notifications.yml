name: Test Result Notifications & Reporting

on:
  workflow_run:
    workflows: ["Comprehensive Test Suite", "Test Optimization & Parallelization", "Coverage Reporting & Enforcement"]
    types:
      - completed
  schedule:
    # Daily test health report at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      notification_type:
        description: 'Type of notification to send'
        required: true
        default: 'summary'
        type: choice
        options:
          - summary
          - detailed
          - performance
          - coverage

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Collect Test Results
  collect-test-results:
    name: Collect Test Results
    runs-on: ubuntu-latest
    outputs:
      test-status: ${{ steps.analyze.outputs.test-status }}
      coverage-status: ${{ steps.analyze.outputs.coverage-status }}
      performance-status: ${{ steps.analyze.outputs.performance-status }}
      summary-report: ${{ steps.analyze.outputs.summary-report }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get workflow run details
        id: workflow-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "workflow_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
            echo "workflow_name=${{ github.event.workflow_run.name }}" >> $GITHUB_OUTPUT
            echo "workflow_status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
            echo "workflow_url=${{ github.event.workflow_run.html_url }}" >> $GITHUB_OUTPUT
          else
            echo "workflow_id=manual" >> $GITHUB_OUTPUT
            echo "workflow_name=Manual Trigger" >> $GITHUB_OUTPUT
            echo "workflow_status=success" >> $GITHUB_OUTPUT
            echo "workflow_url=${{ github.server_url }}/${{ github.repository }}/actions" >> $GITHUB_OUTPUT
          fi

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results-summary
          path: test-results/
        continue-on-error: true

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports-final
          path: coverage-results/
        continue-on-error: true

      - name: Download performance artifacts
        uses: actions/download-artifact@v4
        with:
          name: performance-test-results
          path: performance-results/
        continue-on-error: true

      - name: Analyze test results
        id: analyze
        run: |
          # Initialize status variables
          TEST_STATUS="unknown"
          COVERAGE_STATUS="unknown"
          PERFORMANCE_STATUS="unknown"
          
          # Analyze test results
          if [ -f "test-results/summary.json" ]; then
            TEST_STATUS=$(jq -r '.status' test-results/summary.json)
          elif [ "${{ steps.workflow-info.outputs.workflow_status }}" = "success" ]; then
            TEST_STATUS="success"
          elif [ "${{ steps.workflow-info.outputs.workflow_status }}" = "failure" ]; then
            TEST_STATUS="failure"
          fi
          
          # Analyze coverage results
          if [ -f "coverage-results/coverage-final/coverage-summary.json" ]; then
            COVERAGE_PCT=$(jq -r '.total.lines.pct' coverage-results/coverage-final/coverage-summary.json)
            if (( $(echo "$COVERAGE_PCT >= 80" | bc -l) )); then
              COVERAGE_STATUS="success"
            else
              COVERAGE_STATUS="failure"
            fi
          fi
          
          # Analyze performance results
          if [ -d "performance-results/" ]; then
            PERFORMANCE_STATUS="success"
          fi
          
          # Generate summary report
          SUMMARY_REPORT=$(cat << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow": "${{ steps.workflow-info.outputs.workflow_name }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "test_status": "$TEST_STATUS",
            "coverage_status": "$COVERAGE_STATUS",
            "performance_status": "$PERFORMANCE_STATUS",
            "workflow_url": "${{ steps.workflow-info.outputs.workflow_url }}"
          }
          EOF
          )
          
          echo "test-status=$TEST_STATUS" >> $GITHUB_OUTPUT
          echo "coverage-status=$COVERAGE_STATUS" >> $GITHUB_OUTPUT
          echo "performance-status=$PERFORMANCE_STATUS" >> $GITHUB_OUTPUT
          echo "summary-report<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY_REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Job 2: Generate Test Dashboard
  generate-test-dashboard:
    name: Generate Test Dashboard
    runs-on: ubuntu-latest
    needs: collect-test-results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create test dashboard
        run: |
          mkdir -p dashboard
          
          # Create HTML dashboard
          cat > dashboard/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>HalluciFix Test Dashboard</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 20px; }
                  .metric-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .metric-value { font-size: 2em; font-weight: bold; margin-bottom: 5px; }
                  .metric-label { color: #666; font-size: 0.9em; }
                  .status-success { color: #28a745; }
                  .status-failure { color: #dc3545; }
                  .status-warning { color: #ffc107; }
                  .status-unknown { color: #6c757d; }
                  .chart-container { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .trend-item { display: flex; justify-content: space-between; align-items: center; padding: 10px 0; border-bottom: 1px solid #eee; }
                  .trend-item:last-child { border-bottom: none; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üß™ HalluciFix Test Dashboard</h1>
                      <p>Last updated: <span id="last-updated"></span></p>
                  </div>
                  
                  <div class="metrics">
                      <div class="metric-card">
                          <div class="metric-value status-${{ needs.collect-test-results.outputs.test-status }}">
                              ${{ needs.collect-test-results.outputs.test-status == 'success' && '‚úÖ' || '‚ùå' }}
                          </div>
                          <div class="metric-label">Test Status</div>
                      </div>
                      
                      <div class="metric-card">
                          <div class="metric-value status-${{ needs.collect-test-results.outputs.coverage-status }}">
                              ${{ needs.collect-test-results.outputs.coverage-status == 'success' && 'üìä' || 'üìâ' }}
                          </div>
                          <div class="metric-label">Coverage Status</div>
                      </div>
                      
                      <div class="metric-card">
                          <div class="metric-value status-${{ needs.collect-test-results.outputs.performance-status }}">
                              ${{ needs.collect-test-results.outputs.performance-status == 'success' && 'üöÄ' || 'üêå' }}
                          </div>
                          <div class="metric-label">Performance Status</div>
                      </div>
                      
                      <div class="metric-card">
                          <div class="metric-value">${{ github.run_number }}</div>
                          <div class="metric-label">Build Number</div>
                      </div>
                  </div>
                  
                  <div class="chart-container">
                      <h3>üìà Recent Test Trends</h3>
                      <div class="trend-item">
                          <span>Unit Tests</span>
                          <span class="status-${{ needs.collect-test-results.outputs.test-status }}">
                              ${{ needs.collect-test-results.outputs.test-status }}
                          </span>
                      </div>
                      <div class="trend-item">
                          <span>Integration Tests</span>
                          <span class="status-${{ needs.collect-test-results.outputs.test-status }}">
                              ${{ needs.collect-test-results.outputs.test-status }}
                          </span>
                      </div>
                      <div class="trend-item">
                          <span>E2E Tests</span>
                          <span class="status-${{ needs.collect-test-results.outputs.test-status }}">
                              ${{ needs.collect-test-results.outputs.test-status }}
                          </span>
                      </div>
                      <div class="trend-item">
                          <span>Coverage</span>
                          <span class="status-${{ needs.collect-test-results.outputs.coverage-status }}">
                              ${{ needs.collect-test-results.outputs.coverage-status }}
                          </span>
                      </div>
                  </div>
              </div>
              
              <script>
                  document.getElementById('last-updated').textContent = new Date().toLocaleString();
              </script>
          </body>
          </html>
          EOF

      - name: Upload dashboard
        uses: actions/upload-artifact@v4
        with:
          name: test-dashboard
          path: dashboard/
          retention-days: 30

  # Job 3: Send Slack Notifications
  send-slack-notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: collect-test-results
    if: always() && (needs.collect-test-results.outputs.test-status == 'failure' || github.event_name == 'schedule')

    steps:
      - name: Prepare Slack message
        id: slack-message
        run: |
          TEST_STATUS="${{ needs.collect-test-results.outputs.test-status }}"
          COVERAGE_STATUS="${{ needs.collect-test-results.outputs.coverage-status }}"
          
          if [ "$TEST_STATUS" = "failure" ]; then
            EMOJI="üö®"
            COLOR="danger"
            TITLE="Test Failure Alert"
            MESSAGE="Tests are failing on ${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            EMOJI="üìä"
            COLOR="good"
            TITLE="Daily Test Report"
            MESSAGE="Daily test health summary for ${{ github.ref_name }}"
          else
            EMOJI="‚úÖ"
            COLOR="good"
            TITLE="Test Success"
            MESSAGE="All tests passing on ${{ github.ref_name }}"
          fi
          
          SLACK_PAYLOAD=$(cat << EOF
          {
            "attachments": [
              {
                "color": "$COLOR",
                "title": "$EMOJI $TITLE",
                "text": "$MESSAGE",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Test Status",
                    "value": "$TEST_STATUS",
                    "short": true
                  },
                  {
                    "title": "Coverage Status",
                    "value": "$COVERAGE_STATUS",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                    "short": true
                  },
                  {
                    "title": "Workflow",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          )
          
          echo "payload<<EOF" >> $GITHUB_OUTPUT
          echo "$SLACK_PAYLOAD" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '${{ steps.slack-message.outputs.payload }}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 4: Create GitHub Issue for Test Failures
  create-failure-issue:
    name: Create Failure Issue
    runs-on: ubuntu-latest
    needs: collect-test-results
    if: needs.collect-test-results.outputs.test-status == 'failure' && github.ref == 'refs/heads/main'

    steps:
      - name: Check for existing failure issue
        id: check-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'test-failure,automated'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Test Failure Alert')
            );
            
            return existingIssue ? existingIssue.number : null;

      - name: Create or update failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const existingIssueNumber = ${{ steps.check-issue.outputs.result }};
            const summary = ${{ needs.collect-test-results.outputs.summary-report }};
            
            const issueBody = `
            ## üö® Test Failure Alert
            
            **Workflow:** ${summary.workflow}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Timestamp:** ${summary.timestamp}
            
            ### Status Summary
            - **Tests:** ${summary.test_status}
            - **Coverage:** ${summary.coverage_status}
            - **Performance:** ${summary.performance_status}
            
            ### Actions Required
            - [ ] Investigate test failures
            - [ ] Fix failing tests
            - [ ] Verify coverage thresholds
            - [ ] Run tests locally to confirm fixes
            
            ### Links
            - [Workflow Run](${summary.workflow_url})
            - [Commit Details](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            
            ---
            *This issue was automatically created by GitHub Actions.*
            *Last updated: ${new Date().toISOString()}*
            `;
            
            if (existingIssueNumber) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssueNumber,
                body: `## üîÑ Updated Test Failure Report\n\n${issueBody}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Test Failure Alert - Automated',
                body: issueBody,
                labels: ['test-failure', 'automated', 'bug', 'priority-high']
              });
            }

  # Job 5: Performance Regression Alert
  performance-regression-alert:
    name: Performance Regression Alert
    runs-on: ubuntu-latest
    needs: collect-test-results
    if: needs.collect-test-results.outputs.performance-status == 'failure'

    steps:
      - name: Create performance regression issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = `
            ## üìâ Performance Regression Detected
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Detected:** ${new Date().toISOString()}
            
            ### Performance Issues
            Performance tests have detected a regression in the application.
            
            ### Investigation Steps
            - [ ] Review performance test results
            - [ ] Identify performance bottlenecks
            - [ ] Compare with baseline metrics
            - [ ] Optimize identified issues
            - [ ] Re-run performance tests
            
            ### Links
            - [Performance Test Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Commit Details](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            
            ---
            *This issue was automatically created due to performance regression detection.*
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìâ Performance Regression Alert - ' + new Date().toISOString().split('T')[0],
              body: issueBody,
              labels: ['performance', 'regression', 'automated', 'priority-medium']
            });

  # Job 6: Generate Weekly Test Report
  weekly-test-report:
    name: Weekly Test Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 9 * * 1'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate weekly report
        run: |
          echo "## üìä Weekly Test Health Report" >> weekly-report.md
          echo "" >> weekly-report.md
          echo "**Week of:** $(date -d 'last monday' +%Y-%m-%d) to $(date +%Y-%m-%d)" >> weekly-report.md
          echo "" >> weekly-report.md
          echo "### Summary" >> weekly-report.md
          echo "- Total test runs: TBD" >> weekly-report.md
          echo "- Success rate: TBD" >> weekly-report.md
          echo "- Average coverage: TBD" >> weekly-report.md
          echo "- Performance trends: TBD" >> weekly-report.md
          echo "" >> weekly-report.md
          echo "### Recommendations" >> weekly-report.md
          echo "- Continue monitoring test health" >> weekly-report.md
          echo "- Address any failing tests promptly" >> weekly-report.md
          echo "- Maintain coverage above 80%" >> weekly-report.md

      - name: Create weekly report issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('weekly-report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìä Weekly Test Health Report - ' + new Date().toISOString().split('T')[0],
              body: reportContent,
              labels: ['report', 'weekly', 'automated', 'testing']
            });

  # Job 7: Test Result Summary
  test-result-summary:
    name: Test Result Summary
    runs-on: ubuntu-latest
    needs: [collect-test-results, generate-test-dashboard]
    if: always()

    steps:
      - name: Generate final summary
        run: |
          echo "## üß™ Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Status:** ${{ needs.collect-test-results.outputs.test-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage Status:** ${{ needs.collect-test-results.outputs.coverage-status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Status:** ${{ needs.collect-test-results.outputs.performance-status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Actions Taken" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.collect-test-results.outputs.test-status }}" = "failure" ]; then
            echo "- üö® Failure notifications sent" >> $GITHUB_STEP_SUMMARY
            echo "- üìù GitHub issue created for investigation" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.collect-test-results.outputs.performance-status }}" = "failure" ]; then
            echo "- üìâ Performance regression alert created" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- üìä Test dashboard updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources" >> $GITHUB_STEP_SUMMARY
          echo "- [Test Dashboard](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY
          echo "- [Workflow Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY