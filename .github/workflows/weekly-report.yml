name: Weekly Test Health Report

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      send_notifications:
        description: 'Send notifications to team'
        required: false
        default: true
        type: boolean

jobs:
  generate-report:
    name: Generate Weekly Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download latest dashboard data
        uses: actions/download-artifact@v4
        with:
          name: dashboard-data
          path: docs/dashboard/data/
        continue-on-error: true

      - name: Generate weekly report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
        run: node scripts/weekly-report-generator.js

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: weekly-report
          path: docs/reports/
          retention-days: 90

      - name: Commit report to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -d "docs/reports" ] && [ "$(ls -A docs/reports)" ]; then
            git add docs/reports/
            git commit -m "docs: add weekly test health report for $(date +%Y-%m-%d)" || echo "No changes to commit"
            git push || echo "No changes to push"
          fi

  notify-team:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: generate-report
    if: github.event.inputs.send_notifications != 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download report
        uses: actions/download-artifact@v4
        with:
          name: weekly-report
          path: docs/reports/

      - name: Get latest report
        id: report
        run: |
          LATEST_REPORT=$(ls -t docs/reports/weekly-report-*.md | head -1)
          echo "report_file=$LATEST_REPORT" >> $GITHUB_OUTPUT
          
          # Extract key metrics for notification
          SUCCESS_RATE=$(grep "Test Success Rate" "$LATEST_REPORT" | sed 's/.*: \([0-9.]*\)%.*/\1/')
          COVERAGE=$(grep "Coverage.*lines" "$LATEST_REPORT" | sed 's/.*: \([0-9.]*\)%.*/\1/')
          FLAKY_TESTS=$(grep "Total Flaky Tests" "$LATEST_REPORT" | sed 's/.*: \([0-9]*\)/\1/')
          
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "flaky_tests=$FLAKY_TESTS" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ðŸ“Š **Weekly Test Health Report** - $(date +"%B %d, %Y")
            
            **Key Metrics:**
            â€¢ Test Success Rate: ${{ steps.report.outputs.success_rate }}%
            â€¢ Code Coverage: ${{ steps.report.outputs.coverage }}%
            â€¢ Flaky Tests: ${{ steps.report.outputs.flaky_tests }}
            
            **Quality Trend:** ${{ steps.report.outputs.trend || 'Stable' }}
            
            ðŸ“‹ **Full Report:** [View on GitHub](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+label%3Aweekly-report+is%3Aopen)
            ðŸ“Š **Dashboard:** [Live Metrics](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
            
            *Automated weekly report generated by GitHub Actions*
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ðŸ“Š Weekly Test Health Report - ${{ github.event.repository.name }}"
          to: ${{ secrets.TEAM_EMAIL_LIST }}
          from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
          html_body: |
            <h2>ðŸ“Š Weekly Test Health Report</h2>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Report Date:</strong> $(date +"%B %d, %Y")</p>
            
            <h3>Key Metrics</h3>
            <ul>
              <li><strong>Test Success Rate:</strong> ${{ steps.report.outputs.success_rate }}%</li>
              <li><strong>Code Coverage:</strong> ${{ steps.report.outputs.coverage }}%</li>
              <li><strong>Flaky Tests:</strong> ${{ steps.report.outputs.flaky_tests }}</li>
            </ul>
            
            <h3>Quick Links</h3>
            <ul>
              <li><a href="https://github.com/${{ github.repository }}/issues?q=is%3Aissue+label%3Aweekly-report+is%3Aopen">ðŸ“‹ Full Report</a></li>
              <li><a href="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/">ðŸ“Š Live Dashboard</a></li>
              <li><a href="https://github.com/${{ github.repository }}/actions">ðŸ”§ CI/CD Status</a></li>
            </ul>
            
            <p><em>This is an automated report generated by GitHub Actions.</em></p>
        continue-on-error: true

      - name: Create team discussion
        uses: actions/github-script@v7
        with:
          script: |
            // Create a team discussion for the weekly report
            const fs = require('fs');
            
            // Read the latest report
            const reportFiles = fs.readdirSync('docs/reports').filter(f => f.startsWith('weekly-report-'));
            const latestReport = reportFiles.sort().reverse()[0];
            const reportContent = fs.readFileSync(`docs/reports/${latestReport}`, 'utf8');
            
            // Extract summary for discussion
            const lines = reportContent.split('\n');
            const summaryEnd = lines.findIndex(line => line.startsWith('## ðŸ§ª'));
            const summary = lines.slice(0, summaryEnd).join('\n');
            
            // Create discussion
            try {
              const discussion = await github.rest.teams.createDiscussionInOrg({
                org: context.repo.owner,
                team_slug: 'development-team', // Adjust team slug as needed
                title: `ðŸ“Š Weekly Test Health Report Discussion - ${new Date().toLocaleDateString()}`,
                body: `${summary}
            
            ## Discussion Points
            
            Please review this week's test health report and share your thoughts:
            
            1. **Test Stability**: Are there any patterns in the test failures we should address?
            2. **Coverage Goals**: Should we focus on any specific modules for coverage improvement?
            3. **Performance**: Any concerns about the current performance metrics?
            4. **Flaky Tests**: Volunteers to help stabilize the identified flaky tests?
            
            ## Action Items
            
            Based on the report, let's discuss and assign action items for the upcoming week.
            
            ---
            
            **Full Report**: [View Complete Report](https://github.com/${context.repo.owner}/${context.repo.repo}/issues?q=is%3Aissue+label%3Aweekly-report+is%3Aopen)
            **Dashboard**: [Live Metrics](https://${context.repo.owner}.github.io/${context.repo.repo}/)
            `
              });
              
              console.log(`Created team discussion: ${discussion.data.html_url}`);
            } catch (error) {
              console.log('Team discussion creation failed (team may not exist):', error.message);
            }
        continue-on-error: true

  update-dashboard:
    name: Update Dashboard with Report Data
    runs-on: ubuntu-latest
    needs: generate-report
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download report
        uses: actions/download-artifact@v4
        with:
          name: weekly-report
          path: docs/reports/

      - name: Update dashboard with report data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Generate updated dashboard data including report metrics
          node scripts/dashboard-data-generator.js
          
          # Add report metadata to dashboard data
          cat > docs/dashboard/data/weekly-reports.json << EOF
          {
            "latestReport": "$(ls -t docs/reports/weekly-report-*.md | head -1 | xargs basename)",
            "reportDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "reportUrl": "https://github.com/${{ github.repository }}/blob/main/$(ls -t docs/reports/weekly-report-*.md | head -1)",
            "lastUpdated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF

      - name: Deploy updated dashboard
        uses: ./.github/workflows/dashboard-deploy.yml
        continue-on-error: true