name: Deploy Test Dashboard

on:
  push:
    branches: [main]
    paths:
      - 'docs/dashboard/**'
      - '.github/workflows/dashboard-deploy.yml'
  workflow_run:
    workflows: ["Comprehensive Test Suite"]
    types: [completed]
  schedule:
    # Update dashboard data every hour
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-data:
    name: Generate Dashboard Data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download latest test artifacts
        uses: actions/download-artifact@v4
        with:
          name: final-coverage-report
          path: coverage/
        continue-on-error: true

      - name: Download performance artifacts
        uses: actions/download-artifact@v4
        with:
          name: performance-results
          path: performance-report/
        continue-on-error: true

      - name: Generate dashboard data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
        run: node scripts/dashboard-data-generator.js

      - name: Upload dashboard data
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-data
          path: docs/dashboard/data/
          retention-days: 30

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: generate-data
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dashboard data
        uses: actions/download-artifact@v4
        with:
          name: dashboard-data
          path: docs/dashboard/data/

      - name: Update dashboard configuration
        run: |
          # Update API base URL in dashboard.js for production
          sed -i "s|https://api.github.com/repos/your-org/hallucifix|https://api.github.com/repos/${{ github.repository }}|g" docs/dashboard/dashboard.js
          
          # Add timestamp to prevent caching issues
          echo "window.DASHBOARD_BUILD_TIME = '$(date -u +"%Y-%m-%dT%H:%M:%SZ")';" >> docs/dashboard/dashboard.js

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/dashboard/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify-deployment:
    name: Notify Dashboard Deployment
    runs-on: ubuntu-latest
    needs: [generate-data, deploy]
    if: always()
    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 Test Dashboard deployed successfully!
            
            📊 Dashboard URL: ${{ needs.deploy.outputs.page_url }}
            🔄 Data updated: $(date -u +"%Y-%m-%d %H:%M UTC")
            
            Latest metrics:
            • Test success rate updated
            • Coverage trends refreshed  
            • Performance metrics updated
            • Issue tracking synchronized
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Test Dashboard deployment failed
            
            Please check the workflow logs for details.
            Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[DASHBOARD] Deployment failed',
              body: `## Dashboard Deployment Failure
              
              The test dashboard deployment failed during the latest update.
              
              **Failure Details:**
              - Workflow Run: [${context.runId}](${context.server_url}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              - Commit: ${context.sha}
              - Branch: ${context.ref}
              - Timestamp: ${new Date().toISOString()}
              
              **Possible Causes:**
              - GitHub Pages configuration issues
              - Data generation failures
              - Network connectivity problems
              - Permission issues
              
              **Next Steps:**
              - [ ] Check workflow logs for specific error messages
              - [ ] Verify GitHub Pages settings
              - [ ] Test data generation locally
              - [ ] Retry deployment if transient issue
              
              ---
              *This issue was created automatically by the dashboard deployment workflow.*`,
              labels: ['dashboard', 'deployment', 'bug', 'needs-investigation']
            });

  update-readme:
    name: Update README with Dashboard Link
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update README with dashboard link
        run: |
          # Check if dashboard link already exists in README
          if ! grep -q "Test Dashboard" README.md; then
            # Add dashboard section to README
            cat >> README.md << 'EOF'
          
          ## 📊 Test Dashboard
          
          View real-time test metrics, coverage trends, and quality insights:
          
          **[🚀 Live Test Dashboard](${{ needs.deploy.outputs.page_url }})**
          
          The dashboard provides:
          - Real-time test execution status
          - Coverage trends and analysis  
          - Performance metrics tracking
          - Flaky test identification
          - Issue management overview
          
          Dashboard is automatically updated after each test run.
          EOF
          fi

      - name: Commit README updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet README.md; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "docs: add test dashboard link to README"
            git push
          fi