import { v4 as uuidv4 } from 'uuid';
export var LogLevel;
(function (LogLevel) {
    LogLevel["DEBUG"] = "DEBUG";
    LogLevel["INFO"] = "INFO";
    LogLevel["WARN"] = "WARN";
    LogLevel["ERROR"] = "ERROR";
    LogLevel["FATAL"] = "FATAL";
})(LogLevel || (LogLevel = {}));
export var LogCategory;
(function (LogCategory) {
    LogCategory["APPLICATION"] = "APPLICATION";
    LogCategory["BUSINESS"] = "BUSINESS";
    LogCategory["SECURITY"] = "SECURITY";
    LogCategory["PERFORMANCE"] = "PERFORMANCE";
    LogCategory["AUDIT"] = "AUDIT";
})(LogCategory || (LogCategory = {}));
export class StructuredLogger {
    context;
    logGroupName;
    constructor(context = {}) {
        this.context = {
            service: 'hallucifix',
            version: process.env.APP_VERSION || '1.0.0',
            environment: process.env.NODE_ENV || 'development',
            ...context
        };
        // Determine log group based on environment
        const env = process.env.NODE_ENV || 'development';
        this.logGroupName = `/hallucifix/${env}/application`;
    }
    /**
     * Create a child logger with additional context
     */
    child(additionalContext) {
        return new StructuredLogger({
            ...this.context,
            ...additionalContext
        });
    }
    /**
     * Set correlation ID for request tracing
     */
    withCorrelationId(correlationId) {
        return this.child({ correlationId });
    }
    /**
     * Set request ID for request tracking
     */
    withRequestId(requestId) {
        return this.child({ requestId });
    }
    /**
     * Set user context
     */
    withUser(userId, sessionId) {
        return this.child({ userId, sessionId });
    }
    /**
     * Debug level logging
     */
    debug(message, metadata) {
        this.log(LogLevel.DEBUG, LogCategory.APPLICATION, message, metadata);
    }
    /**
     * Info level logging
     */
    info(message, metadata) {
        this.log(LogLevel.INFO, LogCategory.APPLICATION, message, metadata);
    }
    /**
     * Warning level logging
     */
    warn(message, metadata) {
        this.log(LogLevel.WARN, LogCategory.APPLICATION, message, metadata);
    }
    /**
     * Error level logging
     */
    error(message, error, metadata) {
        const errorInfo = error ? {
            name: error.name,
            message: error.message,
            stack: error.stack,
            code: error.code
        } : undefined;
        this.log(LogLevel.ERROR, LogCategory.APPLICATION, message, metadata, errorInfo);
    }
    /**
     * Fatal level logging
     */
    fatal(message, error, metadata) {
        const errorInfo = error ? {
            name: error.name,
            message: error.message,
            stack: error.stack,
            code: error.code
        } : undefined;
        this.log(LogLevel.FATAL, LogCategory.APPLICATION, message, metadata, errorInfo);
    }
    /**
     * Business event logging
     */
    business(eventType, message, businessData, metadata) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            level: LogLevel.INFO,
            category: LogCategory.BUSINESS,
            message,
            context: this.context,
            metadata,
            business: {
                eventType,
                ...businessData
            }
        };
        this.writeLog(logEntry, '/hallucifix/' + (process.env.NODE_ENV || 'development') + '/business');
    }
    /**
     * Security event logging
     */
    security(eventType, message, securityData, metadata) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            level: LogLevel.INFO,
            category: LogCategory.SECURITY,
            message,
            context: this.context,
            metadata: {
                ...metadata,
                ...securityData,
                eventType
            }
        };
        this.writeLog(logEntry, '/hallucifix/' + (process.env.NODE_ENV || 'development') + '/security');
    }
    /**
     * Performance logging
     */
    performance(message, performanceData, metadata) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            level: LogLevel.INFO,
            category: LogCategory.PERFORMANCE,
            message,
            context: this.context,
            metadata,
            performance: performanceData
        };
        this.writeLog(logEntry);
    }
    /**
     * Audit logging
     */
    audit(action, message, auditData, metadata) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            level: LogLevel.INFO,
            category: LogCategory.AUDIT,
            message,
            context: this.context,
            metadata: {
                ...metadata,
                action,
                ...auditData
            }
        };
        this.writeLog(logEntry);
    }
    /**
     * Generic log method
     */
    log(level, category, message, metadata, error) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            level,
            category,
            message,
            context: this.context,
            metadata,
            error
        };
        this.writeLog(logEntry);
    }
    /**
     * Write log entry to appropriate destination
     */
    writeLog(logEntry, customLogGroup) {
        const logString = JSON.stringify(logEntry);
        // In development, also log to console for debugging
        if (process.env.NODE_ENV === 'development') {
            const consoleMethod = this.getConsoleMethod(logEntry.level);
            consoleMethod(logString);
        }
        // In production, send to CloudWatch Logs
        if (process.env.NODE_ENV === 'production') {
            this.sendToCloudWatch(logEntry, customLogGroup || this.logGroupName);
        }
        // Send to external logging service if configured
        if (process.env.EXTERNAL_LOG_ENDPOINT) {
            this.sendToExternalService(logEntry);
        }
    }
    /**
     * Get appropriate console method for log level
     */
    getConsoleMethod(level) {
        switch (level) {
            case LogLevel.DEBUG:
                return console.debug;
            case LogLevel.INFO:
                return console.info;
            case LogLevel.WARN:
                return console.warn;
            case LogLevel.ERROR:
            case LogLevel.FATAL:
                return console.error;
            default:
                return console.log;
        }
    }
    /**
     * Send log to CloudWatch Logs (placeholder for AWS SDK implementation)
     */
    async sendToCloudWatch(logEntry, logGroupName) {
        try {
            // This would be implemented with AWS CloudWatch Logs SDK
            // For now, we'll use console.log as a placeholder
            if (typeof window === 'undefined') {
                // Server-side logging
                console.log(`[CloudWatch:${logGroupName}]`, JSON.stringify(logEntry));
            }
        }
        catch (error) {
            console.error('Failed to send log to CloudWatch:', error);
        }
    }
    /**
     * Send log to external logging service
     */
    async sendToExternalService(logEntry) {
        try {
            if (process.env.EXTERNAL_LOG_ENDPOINT) {
                // Implementation for external logging service (e.g., Datadog, New Relic)
                await fetch(process.env.EXTERNAL_LOG_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${process.env.EXTERNAL_LOG_API_KEY}`
                    },
                    body: JSON.stringify(logEntry)
                });
            }
        }
        catch (error) {
            console.error('Failed to send log to external service:', error);
        }
    }
    /**
     * Create a timer for performance logging
     */
    timer(label) {
        const startTime = Date.now();
        const startMemory = process.memoryUsage?.()?.heapUsed || 0;
        return {
            end: (metadata) => {
                const duration = Date.now() - startTime;
                const endMemory = process.memoryUsage?.()?.heapUsed || 0;
                const memoryDelta = endMemory - startMemory;
                this.performance(`Timer: ${label}`, {
                    duration,
                    memoryUsage: memoryDelta
                }, metadata);
            }
        };
    }
    /**
     * Log HTTP request/response
     */
    httpRequest(method, url, statusCode, duration, metadata) {
        const level = statusCode >= 500 ? LogLevel.ERROR :
            statusCode >= 400 ? LogLevel.WARN : LogLevel.INFO;
        this.log(level, LogCategory.APPLICATION, `HTTP ${method} ${url}`, {
            ...metadata,
            httpMethod: method,
            httpUrl: url,
            httpStatusCode: statusCode,
            httpDuration: duration
        });
    }
    /**
     * Log database query
     */
    dbQuery(query, duration, rowCount, metadata) {
        this.performance('Database Query', {
            duration
        }, {
            ...metadata,
            query: query.substring(0, 1000), // Truncate long queries
            rowCount
        });
    }
}
// Export singleton instance
export const logger = new StructuredLogger();
// Export factory function for creating loggers with context
export function createLogger(context) {
    return new StructuredLogger(context);
}
// Export middleware for Express.js
export function loggingMiddleware() {
    return (req, res, next) => {
        const requestId = uuidv4();
        const startTime = Date.now();
        // Add logger to request object
        req.logger = logger.withRequestId(requestId);
        // Log incoming request
        req.logger.info('Incoming HTTP request', {
            method: req.method,
            url: req.url,
            userAgent: req.get('User-Agent'),
            ip: req.ip
        });
        // Override res.end to log response
        const originalEnd = res.end;
        res.end = function (...args) {
            const duration = Date.now() - startTime;
            req.logger.httpRequest(req.method, req.url, res.statusCode, duration);
            originalEnd.apply(res, args);
        };
        next();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlZExvZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0cnVjdHVyZWRMb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFcEMsTUFBTSxDQUFOLElBQVksUUFNWDtBQU5ELFdBQVksUUFBUTtJQUNsQiwyQkFBZSxDQUFBO0lBQ2YseUJBQWEsQ0FBQTtJQUNiLHlCQUFhLENBQUE7SUFDYiwyQkFBZSxDQUFBO0lBQ2YsMkJBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTlcsUUFBUSxLQUFSLFFBQVEsUUFNbkI7QUFFRCxNQUFNLENBQU4sSUFBWSxXQU1YO0FBTkQsV0FBWSxXQUFXO0lBQ3JCLDBDQUEyQixDQUFBO0lBQzNCLG9DQUFxQixDQUFBO0lBQ3JCLG9DQUFxQixDQUFBO0lBQ3JCLDBDQUEyQixDQUFBO0lBQzNCLDhCQUFlLENBQUE7QUFDakIsQ0FBQyxFQU5XLFdBQVcsS0FBWCxXQUFXLFFBTXRCO0FBMkNELE1BQU0sT0FBTyxnQkFBZ0I7SUFDbkIsT0FBTyxDQUFhO0lBQ3BCLFlBQVksQ0FBUztJQUU3QixZQUFZLFVBQStCLEVBQUU7UUFDM0MsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLE9BQU8sRUFBRSxZQUFZO1lBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxPQUFPO1lBQzNDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxhQUFhO1lBQ2xELEdBQUcsT0FBTztTQUNYLENBQUM7UUFFRiwyQ0FBMkM7UUFDM0MsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksYUFBYSxDQUFDO1FBQ2xELElBQUksQ0FBQyxZQUFZLEdBQUcsZUFBZSxHQUFHLGNBQWMsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsaUJB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QUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN0RSxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUM7UUFFRixJQUFJLEVBQUUsQ0FBQztJQUNULENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcblxuZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xuICBERUJVRyA9ICdERUJVRycsXG4gIElORk8gPSAnSU5GTycsXG4gIFdBUk4gPSAnV0FSTicsXG4gIEVSUk9SID0gJ0VSUk9SJyxcbiAgRkFUQUwgPSAnRkFUQUwnXG59XG5cbmV4cG9ydCBlbnVtIExvZ0NhdGVnb3J5IHtcbiAgQVBQTElDQVRJT04gPSAnQVBQTElDQVRJT04nLFxuICBCVVNJTkVTUyA9ICdCVVNJTkVTUycsXG4gIFNFQ1VSSVRZID0gJ1NFQ1VSSVRZJyxcbiAgUEVSRk9STUFOQ0UgPSAnUEVSRk9STUFOQ0UnLFxuICBBVURJVCA9ICdBVURJVCdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dDb250ZXh0IHtcbiAgcmVxdWVzdElkPzogc3RyaW5nO1xuICB1c2VySWQ/OiBzdHJpbmc7XG4gIHNlc3Npb25JZD86IHN0cmluZztcbiAgY29ycmVsYXRpb25JZD86IHN0cmluZztcbiAgdHJhY2VJZD86IHN0cmluZztcbiAgc3BhbklkPzogc3RyaW5nO1xuICBzZXJ2aWNlPzogc3RyaW5nO1xuICB2ZXJzaW9uPzogc3RyaW5nO1xuICBlbnZpcm9ubWVudD86IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ0VudHJ5IHtcbiAgdGltZXN0YW1wOiBzdHJpbmc7XG4gIGxldmVsOiBMb2dMZXZlbDtcbiAgY2F0ZWdvcnk6IExvZ0NhdGVnb3J5O1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGNvbnRleHQ6IExvZ0NvbnRleHQ7XG4gIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgZXJyb3I/OiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBzdGFjaz86IHN0cmluZztcbiAgICBjb2RlPzogc3RyaW5nO1xuICB9O1xuICBwZXJmb3JtYW5jZT86IHtcbiAgICBkdXJhdGlvbj86IG51bWJlcjtcbiAgICBtZW1vcnlVc2FnZT86IG51bWJlcjtcbiAgICBjcHVVc2FnZT86IG51bWJlcjtcbiAgfTtcbiAgYnVzaW5lc3M/OiB7XG4gICAgZXZlbnRUeXBlPzogc3RyaW5nO1xuICAgIGVudGl0eUlkPzogc3RyaW5nO1xuICAgIGVudGl0eVR5cGU/OiBzdHJpbmc7XG4gICAgYWN0aW9uPzogc3RyaW5nO1xuICAgIHJlc3VsdD86IHN0cmluZztcbiAgICBtZXRyaWNzPzogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIFN0cnVjdHVyZWRMb2dnZXIge1xuICBwcml2YXRlIGNvbnRleHQ6IExvZ0NvbnRleHQ7XG4gIHByaXZhdGUgbG9nR3JvdXBOYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY29udGV4dDogUGFydGlhbDxMb2dDb250ZXh0PiA9IHt9KSB7XG4gICAgdGhpcy5jb250ZXh0ID0ge1xuICAgICAgc2VydmljZTogJ2hhbGx1Y2lmaXgnLFxuICAgICAgdmVyc2lvbjogcHJvY2Vzcy5lbnYuQVBQX1ZFUlNJT04gfHwgJzEuMC4wJyxcbiAgICAgIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnLFxuICAgICAgLi4uY29udGV4dFxuICAgIH07XG5cbiAgICAvLyBEZXRlcm1pbmUgbG9nIGdyb3VwIGJhc2VkIG9uIGVudmlyb25tZW50XG4gICAgY29uc3QgZW52ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JztcbiAgICB0aGlzLmxvZ0dyb3VwTmFtZSA9IGAvaGFsbHVjaWZpeC8ke2Vudn0vYXBwbGljYXRpb25gO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoaWxkIGxvZ2dlciB3aXRoIGFkZGl0aW9uYWwgY29udGV4dFxuICAgKi9cbiAgY2hpbGQoYWRkaXRpb25hbENvbnRleHQ6IFBhcnRpYWw8TG9nQ29udGV4dD4pOiBTdHJ1Y3R1cmVkTG9nZ2VyIHtcbiAgICByZXR1cm4gbmV3IFN0cnVjdHVyZWRMb2dnZXIoe1xuICAgICAgLi4udGhpcy5jb250ZXh0LFxuICAgICAgLi4uYWRkaXRpb25hbENvbnRleHRcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgY29ycmVsYXRpb24gSUQgZm9yIHJlcXVlc3QgdHJhY2luZ1xuICAgKi9cbiAgd2l0aENvcnJlbGF0aW9uSWQoY29ycmVsYXRpb25JZDogc3RyaW5nKTogU3RydWN0dXJlZExvZ2dlciB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGQoeyBjb3JyZWxhdGlvbklkIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCByZXF1ZXN0IElEIGZvciByZXF1ZXN0IHRyYWNraW5nXG4gICAqL1xuICB3aXRoUmVxdWVzdElkKHJlcXVlc3RJZDogc3RyaW5nKTogU3RydWN0dXJlZExvZ2dlciB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGQoeyByZXF1ZXN0SWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHVzZXIgY29udGV4dFxuICAgKi9cbiAgd2l0aFVzZXIodXNlcklkOiBzdHJpbmcsIHNlc3Npb25JZD86IHN0cmluZyk6IFN0cnVjdHVyZWRMb2dnZXIge1xuICAgIHJldHVybiB0aGlzLmNoaWxkKHsgdXNlcklkLCBzZXNzaW9uSWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVidWcgbGV2ZWwgbG9nZ2luZ1xuICAgKi9cbiAgZGVidWcobWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5ERUJVRywgTG9nQ2F0ZWdvcnkuQVBQTElDQVRJT04sIG1lc3NhZ2UsIG1ldGFkYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmZvIGxldmVsIGxvZ2dpbmdcbiAgICovXG4gIGluZm8obWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5JTkZPLCBMb2dDYXRlZ29yeS5BUFBMSUNBVElPTiwgbWVzc2FnZSwgbWV0YWRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhcm5pbmcgbGV2ZWwgbG9nZ2luZ1xuICAgKi9cbiAgd2FybihtZXNzYWdlOiBzdHJpbmcsIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55Pik6IHZvaWQge1xuICAgIHRoaXMubG9nKExvZ0xldmVsLldBUk4sIExvZ0NhdGVnb3J5LkFQUExJQ0FUSU9OLCBtZXNzYWdlLCBtZXRhZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogRXJyb3IgbGV2ZWwgbG9nZ2luZ1xuICAgKi9cbiAgZXJyb3IobWVzc2FnZTogc3RyaW5nLCBlcnJvcj86IEVycm9yLCBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4pOiB2b2lkIHtcbiAgICBjb25zdCBlcnJvckluZm8gPSBlcnJvciA/IHtcbiAgICAgIG5hbWU6IGVycm9yLm5hbWUsXG4gICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgc3RhY2s6IGVycm9yLnN0YWNrLFxuICAgICAgY29kZTogKGVycm9yIGFzIGFueSkuY29kZVxuICAgIH0gOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5FUlJPUiwgTG9nQ2F0ZWdvcnkuQVBQTElDQVRJT04sIG1lc3NhZ2UsIG1ldGFkYXRhLCBlcnJvckluZm8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZhdGFsIGxldmVsIGxvZ2dpbmdcbiAgICovXG4gIGZhdGFsKG1lc3NhZ2U6IHN0cmluZywgZXJyb3I/OiBFcnJvciwgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogdm9pZCB7XG4gICAgY29uc3QgZXJyb3JJbmZvID0gZXJyb3IgPyB7XG4gICAgICBuYW1lOiBlcnJvci5uYW1lLFxuICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgIHN0YWNrOiBlcnJvci5zdGFjayxcbiAgICAgIGNvZGU6IChlcnJvciBhcyBhbnkpLmNvZGVcbiAgICB9IDogdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5sb2coTG9nTGV2ZWwuRkFUQUwsIExvZ0NhdGVnb3J5LkFQUExJQ0FUSU9OLCBtZXNzYWdlLCBtZXRhZGF0YSwgZXJyb3JJbmZvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNpbmVzcyBldmVudCBsb2dnaW5nXG4gICAqL1xuICBidXNpbmVzcyhcbiAgICBldmVudFR5cGU6IHN0cmluZyxcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgYnVzaW5lc3NEYXRhOiB7XG4gICAgICBlbnRpdHlJZD86IHN0cmluZztcbiAgICAgIGVudGl0eVR5cGU/OiBzdHJpbmc7XG4gICAgICBhY3Rpb24/OiBzdHJpbmc7XG4gICAgICByZXN1bHQ/OiBzdHJpbmc7XG4gICAgICBtZXRyaWNzPzogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcbiAgICB9LFxuICAgIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PlxuICApOiB2b2lkIHtcbiAgICBjb25zdCBsb2dFbnRyeTogTG9nRW50cnkgPSB7XG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGxldmVsOiBMb2dMZXZlbC5JTkZPLFxuICAgICAgY2F0ZWdvcnk6IExvZ0NhdGVnb3J5LkJVU0lORVNTLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcbiAgICAgIG1ldGFkYXRhLFxuICAgICAgYnVzaW5lc3M6IHtcbiAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICAuLi5idXNpbmVzc0RhdGFcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy53cml0ZUxvZyhsb2dFbnRyeSwgJy9oYWxsdWNpZml4LycgKyAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JykgKyAnL2J1c2luZXNzJyk7XG4gIH1cblxuICAvKipcbiAgICogU2VjdXJpdHkgZXZlbnQgbG9nZ2luZ1xuICAgKi9cbiAgc2VjdXJpdHkoXG4gICAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHNlY3VyaXR5RGF0YToge1xuICAgICAgYWN0aW9uPzogc3RyaW5nO1xuICAgICAgcmVzdWx0PzogJ1NVQ0NFU1MnIHwgJ0ZBSUxVUkUnIHwgJ0JMT0NLRUQnO1xuICAgICAgcmlza0xldmVsPzogJ0xPVycgfCAnTUVESVVNJyB8ICdISUdIJyB8ICdDUklUSUNBTCc7XG4gICAgICBpcEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgICB1c2VyQWdlbnQ/OiBzdHJpbmc7XG4gICAgfSxcbiAgICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT5cbiAgKTogdm9pZCB7XG4gICAgY29uc3QgbG9nRW50cnk6IExvZ0VudHJ5ID0ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBsZXZlbDogTG9nTGV2ZWwuSU5GTyxcbiAgICAgIGNhdGVnb3J5OiBMb2dDYXRlZ29yeS5TRUNVUklUWSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICAuLi5tZXRhZGF0YSxcbiAgICAgICAgLi4uc2VjdXJpdHlEYXRhLFxuICAgICAgICBldmVudFR5cGVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy53cml0ZUxvZyhsb2dFbnRyeSwgJy9oYWxsdWNpZml4LycgKyAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JykgKyAnL3NlY3VyaXR5Jyk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybWFuY2UgbG9nZ2luZ1xuICAgKi9cbiAgcGVyZm9ybWFuY2UoXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHBlcmZvcm1hbmNlRGF0YToge1xuICAgICAgZHVyYXRpb24/OiBudW1iZXI7XG4gICAgICBtZW1vcnlVc2FnZT86IG51bWJlcjtcbiAgICAgIGNwdVVzYWdlPzogbnVtYmVyO1xuICAgIH0sXG4gICAgbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGxvZ0VudHJ5OiBMb2dFbnRyeSA9IHtcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgbGV2ZWw6IExvZ0xldmVsLklORk8sXG4gICAgICBjYXRlZ29yeTogTG9nQ2F0ZWdvcnkuUEVSRk9STUFOQ0UsXG4gICAgICBtZXNzYWdlLFxuICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgbWV0YWRhdGEsXG4gICAgICBwZXJmb3JtYW5jZTogcGVyZm9ybWFuY2VEYXRhXG4gICAgfTtcblxuICAgIHRoaXMud3JpdGVMb2cobG9nRW50cnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF1ZGl0IGxvZ2dpbmdcbiAgICovXG4gIGF1ZGl0KFxuICAgIGFjdGlvbjogc3RyaW5nLFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICBhdWRpdERhdGE6IHtcbiAgICAgIGVudGl0eUlkPzogc3RyaW5nO1xuICAgICAgZW50aXR5VHlwZT86IHN0cmluZztcbiAgICAgIG9sZFZhbHVlPzogYW55O1xuICAgICAgbmV3VmFsdWU/OiBhbnk7XG4gICAgICByZXN1bHQ/OiAnU1VDQ0VTUycgfCAnRkFJTFVSRSc7XG4gICAgfSxcbiAgICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT5cbiAgKTogdm9pZCB7XG4gICAgY29uc3QgbG9nRW50cnk6IExvZ0VudHJ5ID0ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBsZXZlbDogTG9nTGV2ZWwuSU5GTyxcbiAgICAgIGNhdGVnb3J5OiBMb2dDYXRlZ29yeS5BVURJVCxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICAuLi5tZXRhZGF0YSxcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICAuLi5hdWRpdERhdGFcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy53cml0ZUxvZyhsb2dFbnRyeSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJpYyBsb2cgbWV0aG9kXG4gICAqL1xuICBwcml2YXRlIGxvZyhcbiAgICBsZXZlbDogTG9nTGV2ZWwsXG4gICAgY2F0ZWdvcnk6IExvZ0NhdGVnb3J5LFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgZXJyb3I/OiBMb2dFbnRyeVsnZXJyb3InXVxuICApOiB2b2lkIHtcbiAgICBjb25zdCBsb2dFbnRyeTogTG9nRW50cnkgPSB7XG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGxldmVsLFxuICAgICAgY2F0ZWdvcnksXG4gICAgICBtZXNzYWdlLFxuICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgbWV0YWRhdGEsXG4gICAgICBlcnJvclxuICAgIH07XG5cbiAgICB0aGlzLndyaXRlTG9nKGxvZ0VudHJ5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBsb2cgZW50cnkgdG8gYXBwcm9wcmlhdGUgZGVzdGluYXRpb25cbiAgICovXG4gIHByaXZhdGUgd3JpdGVMb2cobG9nRW50cnk6IExvZ0VudHJ5LCBjdXN0b21Mb2dHcm91cD86IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGxvZ1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGxvZ0VudHJ5KTtcblxuICAgIC8vIEluIGRldmVsb3BtZW50LCBhbHNvIGxvZyB0byBjb25zb2xlIGZvciBkZWJ1Z2dpbmdcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIGNvbnN0IGNvbnNvbGVNZXRob2QgPSB0aGlzLmdldENvbnNvbGVNZXRob2QobG9nRW50cnkubGV2ZWwpO1xuICAgICAgY29uc29sZU1ldGhvZChsb2dTdHJpbmcpO1xuICAgIH1cblxuICAgIC8vIEluIHByb2R1Y3Rpb24sIHNlbmQgdG8gQ2xvdWRXYXRjaCBMb2dzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRoaXMuc2VuZFRvQ2xvdWRXYXRjaChsb2dFbnRyeSwgY3VzdG9tTG9nR3JvdXAgfHwgdGhpcy5sb2dHcm91cE5hbWUpO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdG8gZXh0ZXJuYWwgbG9nZ2luZyBzZXJ2aWNlIGlmIGNvbmZpZ3VyZWRcbiAgICBpZiAocHJvY2Vzcy5lbnYuRVhURVJOQUxfTE9HX0VORFBPSU5UKSB7XG4gICAgICB0aGlzLnNlbmRUb0V4dGVybmFsU2VydmljZShsb2dFbnRyeSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhcHByb3ByaWF0ZSBjb25zb2xlIG1ldGhvZCBmb3IgbG9nIGxldmVsXG4gICAqL1xuICBwcml2YXRlIGdldENvbnNvbGVNZXRob2QobGV2ZWw6IExvZ0xldmVsKTogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkIHtcbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICBjYXNlIExvZ0xldmVsLkRFQlVHOlxuICAgICAgICByZXR1cm4gY29uc29sZS5kZWJ1ZztcbiAgICAgIGNhc2UgTG9nTGV2ZWwuSU5GTzpcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUuaW5mbztcbiAgICAgIGNhc2UgTG9nTGV2ZWwuV0FSTjpcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybjtcbiAgICAgIGNhc2UgTG9nTGV2ZWwuRVJST1I6XG4gICAgICBjYXNlIExvZ0xldmVsLkZBVEFMOlxuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBsb2cgdG8gQ2xvdWRXYXRjaCBMb2dzIChwbGFjZWhvbGRlciBmb3IgQVdTIFNESyBpbXBsZW1lbnRhdGlvbilcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgc2VuZFRvQ2xvdWRXYXRjaChsb2dFbnRyeTogTG9nRW50cnksIGxvZ0dyb3VwTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoaXMgd291bGQgYmUgaW1wbGVtZW50ZWQgd2l0aCBBV1MgQ2xvdWRXYXRjaCBMb2dzIFNES1xuICAgICAgLy8gRm9yIG5vdywgd2UnbGwgdXNlIGNvbnNvbGUubG9nIGFzIGEgcGxhY2Vob2xkZXJcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBTZXJ2ZXItc2lkZSBsb2dnaW5nXG4gICAgICAgIGNvbnNvbGUubG9nKGBbQ2xvdWRXYXRjaDoke2xvZ0dyb3VwTmFtZX1dYCwgSlNPTi5zdHJpbmdpZnkobG9nRW50cnkpKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNlbmQgbG9nIHRvIENsb3VkV2F0Y2g6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGxvZyB0byBleHRlcm5hbCBsb2dnaW5nIHNlcnZpY2VcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgc2VuZFRvRXh0ZXJuYWxTZXJ2aWNlKGxvZ0VudHJ5OiBMb2dFbnRyeSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuRVhURVJOQUxfTE9HX0VORFBPSU5UKSB7XG4gICAgICAgIC8vIEltcGxlbWVudGF0aW9uIGZvciBleHRlcm5hbCBsb2dnaW5nIHNlcnZpY2UgKGUuZy4sIERhdGFkb2csIE5ldyBSZWxpYylcbiAgICAgICAgYXdhaXQgZmV0Y2gocHJvY2Vzcy5lbnYuRVhURVJOQUxfTE9HX0VORFBPSU5ULCB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Byb2Nlc3MuZW52LkVYVEVSTkFMX0xPR19BUElfS0VZfWBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGxvZ0VudHJ5KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNlbmQgbG9nIHRvIGV4dGVybmFsIHNlcnZpY2U6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB0aW1lciBmb3IgcGVyZm9ybWFuY2UgbG9nZ2luZ1xuICAgKi9cbiAgdGltZXIobGFiZWw6IHN0cmluZyk6IHtcbiAgICBlbmQ6IChtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHZvaWQ7XG4gIH0ge1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3Qgc3RhcnRNZW1vcnkgPSBwcm9jZXNzLm1lbW9yeVVzYWdlPy4oKT8uaGVhcFVzZWQgfHwgMDtcblxuICAgIHJldHVybiB7XG4gICAgICBlbmQ6IChtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHtcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgICBjb25zdCBlbmRNZW1vcnkgPSBwcm9jZXNzLm1lbW9yeVVzYWdlPy4oKT8uaGVhcFVzZWQgfHwgMDtcbiAgICAgICAgY29uc3QgbWVtb3J5RGVsdGEgPSBlbmRNZW1vcnkgLSBzdGFydE1lbW9yeTtcblxuICAgICAgICB0aGlzLnBlcmZvcm1hbmNlKGBUaW1lcjogJHtsYWJlbH1gLCB7XG4gICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgbWVtb3J5VXNhZ2U6IG1lbW9yeURlbHRhXG4gICAgICAgIH0sIG1ldGFkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIExvZyBIVFRQIHJlcXVlc3QvcmVzcG9uc2VcbiAgICovXG4gIGh0dHBSZXF1ZXN0KFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIHVybDogc3RyaW5nLFxuICAgIHN0YXR1c0NvZGU6IG51bWJlcixcbiAgICBkdXJhdGlvbjogbnVtYmVyLFxuICAgIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PlxuICApOiB2b2lkIHtcbiAgICBjb25zdCBsZXZlbCA9IHN0YXR1c0NvZGUgPj0gNTAwID8gTG9nTGV2ZWwuRVJST1IgOiBcbiAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZSA+PSA0MDAgPyBMb2dMZXZlbC5XQVJOIDogTG9nTGV2ZWwuSU5GTztcblxuICAgIHRoaXMubG9nKGxldmVsLCBMb2dDYXRlZ29yeS5BUFBMSUNBVElPTiwgYEhUVFAgJHttZXRob2R9ICR7dXJsfWAsIHtcbiAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgaHR0cE1ldGhvZDogbWV0aG9kLFxuICAgICAgaHR0cFVybDogdXJsLFxuICAgICAgaHR0cFN0YXR1c0NvZGU6IHN0YXR1c0NvZGUsXG4gICAgICBodHRwRHVyYXRpb246IGR1cmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9nIGRhdGFiYXNlIHF1ZXJ5XG4gICAqL1xuICBkYlF1ZXJ5KFxuICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgZHVyYXRpb246IG51bWJlcixcbiAgICByb3dDb3VudD86IG51bWJlcixcbiAgICBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT5cbiAgKTogdm9pZCB7XG4gICAgdGhpcy5wZXJmb3JtYW5jZSgnRGF0YWJhc2UgUXVlcnknLCB7XG4gICAgICBkdXJhdGlvblxuICAgIH0sIHtcbiAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgcXVlcnk6IHF1ZXJ5LnN1YnN0cmluZygwLCAxMDAwKSwgLy8gVHJ1bmNhdGUgbG9uZyBxdWVyaWVzXG4gICAgICByb3dDb3VudFxuICAgIH0pO1xuICB9XG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBsb2dnZXIgPSBuZXcgU3RydWN0dXJlZExvZ2dlcigpO1xuXG4vLyBFeHBvcnQgZmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbG9nZ2VycyB3aXRoIGNvbnRleHRcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dnZXIoY29udGV4dDogUGFydGlhbDxMb2dDb250ZXh0Pik6IFN0cnVjdHVyZWRMb2dnZXIge1xuICByZXR1cm4gbmV3IFN0cnVjdHVyZWRMb2dnZXIoY29udGV4dCk7XG59XG5cbi8vIEV4cG9ydCBtaWRkbGV3YXJlIGZvciBFeHByZXNzLmpzXG5leHBvcnQgZnVuY3Rpb24gbG9nZ2luZ01pZGRsZXdhcmUoKSB7XG4gIHJldHVybiAocmVxOiBhbnksIHJlczogYW55LCBuZXh0OiBhbnkpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0SWQgPSB1dWlkdjQoKTtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIFxuICAgIC8vIEFkZCBsb2dnZXIgdG8gcmVxdWVzdCBvYmplY3RcbiAgICByZXEubG9nZ2VyID0gbG9nZ2VyLndpdGhSZXF1ZXN0SWQocmVxdWVzdElkKTtcbiAgICBcbiAgICAvLyBMb2cgaW5jb21pbmcgcmVxdWVzdFxuICAgIHJlcS5sb2dnZXIuaW5mbygnSW5jb21pbmcgSFRUUCByZXF1ZXN0Jywge1xuICAgICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgICAgdXJsOiByZXEudXJsLFxuICAgICAgdXNlckFnZW50OiByZXEuZ2V0KCdVc2VyLUFnZW50JyksXG4gICAgICBpcDogcmVxLmlwXG4gICAgfSk7XG5cbiAgICAvLyBPdmVycmlkZSByZXMuZW5kIHRvIGxvZyByZXNwb25zZVxuICAgIGNvbnN0IG9yaWdpbmFsRW5kID0gcmVzLmVuZDtcbiAgICByZXMuZW5kID0gZnVuY3Rpb24oLi4uYXJnczogYW55W10pIHtcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgIHJlcS5sb2dnZXIuaHR0cFJlcXVlc3QocmVxLm1ldGhvZCwgcmVxLnVybCwgcmVzLnN0YXR1c0NvZGUsIGR1cmF0aW9uKTtcbiAgICAgIG9yaWdpbmFsRW5kLmFwcGx5KHJlcywgYXJncyk7XG4gICAgfTtcblxuICAgIG5leHQoKTtcbiAgfTtcbn0iXX0=