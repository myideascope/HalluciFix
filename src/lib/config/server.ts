/**\n * Server-side Configuration Module\n * Provides Node.js specific configuration with AWS Secrets Manager support\n */\n\nimport { ConfigurationLoader, EnvironmentSecretProvider } from './loader.js';\nimport { \n  AWSSecretsManagerProvider, \n  createAWSSecretsManagerProvider, \n  hasAWSCredentials \n} from './awsSecretsManager.js';\nimport { ConfigurationHotReload, DevelopmentConfigurationUtils } from './hotReload.js';\nimport type { EnvironmentConfig, SecretManagerProvider } from './types.js';\nimport { ConfigurationError } from './errors.js';\n\n/**\n * Server-side Configuration Service\n * Extends the base configuration with server-specific features\n */\nexport class ServerConfigurationService {\n  private static instance: ServerConfigurationService;\n  private config: EnvironmentConfig | null = null;\n  private loader: ConfigurationLoader;\n  private hotReload?: ConfigurationHotReload;\n  private secretManager: SecretManagerProvider;\n\n  private constructor() {\n    // Initialize secret manager based on environment and available credentials\n    this.secretManager = this.createSecretManager();\n    \n    // Initialize configuration loader with secret manager\n    this.loader = new ConfigurationLoader(this.secretManager);\n  }\n\n  static getInstance(): ServerConfigurationService {\n    if (!ServerConfigurationService.instance) {\n      ServerConfigurationService.instance = new ServerConfigurationService();\n    }\n    return ServerConfigurationService.instance;\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      // Load and validate configuration\n      this.config = await this.loader.loadAndValidateConfiguration();\n      \n      // Initialize hot reload in development\n      if (this.isDevelopment) {\n        await this.initializeHotReload();\n      }\n      \n      // Initialize feature flag system\n      await this.initializeFeatureFlags();\n      \n      // Log configuration status\n      this.logConfigurationStatus();\n      \n    } catch (error) {\n      console.error('‚ùå Configuration initialization failed:', error);\n      throw error;\n    }\n  }\n\n  private createSecretManager(): SecretManagerProvider {\n    const environment = process.env.NODE_ENV || 'development';\n    \n    // Use AWS Secrets Manager in production if credentials are available\n    if (environment === 'production' && hasAWSCredentials()) {\n      console.log('üîê Using AWS Secrets Manager for production secrets');\n      return createAWSSecretsManagerProvider();\n    }\n    \n    // Use environment variables in development/staging\n    console.log(`üîê Using environment variables for ${environment} secrets`);\n    return new EnvironmentSecretProvider();\n  }\n\n  private async initializeHotReload(): Promise<void> {\n    try {\n      this.hotReload = new ConfigurationHotReload(this.loader, {\n        enabled: true,\n        watchPaths: ['.env*', 'src/lib/config/**/*.ts'],\n        debounceMs: 1000,\n        enableFileWatching: true,\n        enableEnvWatching: true\n      });\n      \n      // Add configuration change listener\n      this.hotReload.addListener((event) => {\n        console.log(`üîÑ Configuration changed: ${event.type} from ${event.source}`);\n        if (event.config) {\n          this.config = { ...this.config!, ...event.config };\n        }\n      });\n      \n      await this.hotReload.startWatching();\n      console.log('üî• Configuration hot reload enabled');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to initialize hot reload:', error);\n      // Don't fail initialization if hot reload fails\n    }\n  }\n\n  private async initializeFeatureFlags(): Promise<void> {\n    try {\n      // Import feature flag modules\n      const { featureFlagManager } = await import('./featureFlags.js');\n      const { featureFlagConsole } = await import('./featureFlagConsole.js');\n      \n      // Initialize feature flag manager\n      await featureFlagManager.initialize();\n      \n      // Initialize console debugging utilities (development only)\n      if (this.isDevelopment) {\n        featureFlagConsole.initialize();\n      }\n      \n      console.log('üö© Feature flag system initialized');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to initialize feature flag system:', error);\n      // Don't fail configuration initialization if feature flags fail\n    }\n  }\n\n  private logConfigurationStatus(): void {\n    if (!this.config) return;\n    \n    console.log('‚úÖ Configuration loaded successfully');\n    \n    if (this.isDevelopment) {\n      DevelopmentConfigurationUtils.logConfigurationState(this.config);\n      \n      // Log validation warnings\n      const warnings = DevelopmentConfigurationUtils.validateDevelopmentConfig(this.config);\n      if (warnings.length > 0) {\n        console.warn('‚ö†Ô∏è Configuration warnings:');\n        warnings.forEach(warning => console.warn(`  - ${warning}`));\n      }\n    }\n    \n    // Log service availability\n    console.log('üîå Service availability:');\n    console.log(`  - OpenAI: ${this.hasOpenAI() ? '‚úÖ' : '‚ùå'}`);\n    console.log(`  - Anthropic: ${this.hasAnthropic() ? '‚úÖ' : '‚ùå'}`);\n    console.log(`  - Stripe: ${this.hasStripe() ? '‚úÖ' : '‚ùå'}`);\n    console.log(`  - Sentry: ${this.hasSentry() ? '‚úÖ' : '‚ùå'}`);\n  }\n\n  // Configuration getters\n  get app() {\n    this.ensureInitialized();\n    return this.config!.app;\n  }\n\n  get database() {\n    this.ensureInitialized();\n    return this.config!.database;\n  }\n\n  get ai() {\n    this.ensureInitialized();\n    return this.config!.ai;\n  }\n\n  get auth() {\n    this.ensureInitialized();\n    return this.config!.auth;\n  }\n\n  get payments() {\n    this.ensureInitialized();\n    return this.config!.payments;\n  }\n\n  get monitoring() {\n    this.ensureInitialized();\n    return this.config!.monitoring;\n  }\n\n  get features() {\n    this.ensureInitialized();\n    return this.config!.features;\n  }\n\n  get security() {\n    this.ensureInitialized();\n    return this.config!.security;\n  }\n\n  // Convenience methods\n  get isDevelopment(): boolean {\n    return this.app.environment === 'development';\n  }\n\n  get isProduction(): boolean {\n    return this.app.environment === 'production';\n  }\n\n  get isStaging(): boolean {\n    return this.app.environment === 'staging';\n  }\n\n  hasOpenAI(): boolean {\n    return !!this.ai.openai?.apiKey;\n  }\n\n  hasAnthropic(): boolean {\n    return !!this.ai.anthropic?.apiKey;\n  }\n\n  hasStripe(): boolean {\n    return !!this.payments?.stripe;\n  }\n\n  hasSentry(): boolean {\n    return !!this.monitoring.sentry?.dsn;\n  }\n\n  /**\n   * Server-side configuration reload with hot reload support\n   */\n  async reloadConfiguration(): Promise<void> {\n    if (this.hotReload) {\n      await this.hotReload.triggerReload('manual');\n    } else {\n      this.config = await this.loader.loadAndValidateConfiguration();\n    }\n  }\n\n  /**\n   * Get secret manager instance for direct secret operations\n   */\n  getSecretManager(): SecretManagerProvider {\n    return this.secretManager;\n  }\n\n  /**\n   * Test connectivity to all configured services\n   */\n  async testConnectivity(): Promise<Record<string, boolean>> {\n    const results: Record<string, boolean> = {};\n    \n    // Test secret manager connectivity\n    if (this.secretManager instanceof AWSSecretsManagerProvider) {\n      results.secretManager = await this.secretManager.testConnection();\n    } else {\n      results.secretManager = true; // Environment provider always works\n    }\n    \n    // Test database connectivity\n    try {\n      const response = await fetch(`${this.database.supabaseUrl}/rest/v1/`, {\n        headers: {\n          'apikey': this.database.supabaseAnonKey,\n          'Authorization': `Bearer ${this.database.supabaseAnonKey}`\n        }\n      });\n      results.database = response.ok;\n    } catch {\n      results.database = false;\n    }\n    \n    // Test OpenAI connectivity\n    if (this.hasOpenAI()) {\n      try {\n        const response = await fetch('https://api.openai.com/v1/models', {\n          headers: {\n            'Authorization': `Bearer ${this.ai.openai!.apiKey}`\n          }\n        });\n        results.openai = response.ok;\n      } catch {\n        results.openai = false;\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  async cleanup(): Promise<void> {\n    if (this.hotReload) {\n      await this.hotReload.stopWatching();\n    }\n  }\n\n  private ensureInitialized(): void {\n    if (!this.config) {\n      throw new ConfigurationError('Configuration not initialized. Call initialize() first.');\n    }\n  }\n}\n\n// Export singleton instance for server-side use\nexport const serverConfig = ServerConfigurationService.getInstance();\n\n/**\n * Initialize server configuration with error handling\n */\nexport async function initializeServerConfiguration(): Promise<void> {\n  try {\n    await serverConfig.initialize();\n  } catch (error) {\n    if (error instanceof ConfigurationError) {\n      console.error('‚ùå Configuration validation failed:');\n      if (error.validationErrors) {\n        error.validationErrors.forEach(err => console.error(`  - ${err}`));\n      }\n      console.error('\\nüìñ Please check the .env.example file for configuration guidance');\n    } else {\n      console.error('‚ùå Configuration error:', error);\n    }\n    process.exit(1);\n  }\n}\n\n/**\n * Graceful shutdown handler\n */\nexport async function shutdownServerConfiguration(): Promise<void> {\n  try {\n    await serverConfig.cleanup();\n    console.log('üîÑ Configuration system shutdown complete');\n  } catch (error) {\n    console.error('‚ö†Ô∏è Error during configuration cleanup:', error);\n  }\n}\n"