/**\n * AWS Secrets Manager Provider Tests\n */\n\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport {\n  AWSSecretsManagerProvider,\n  createAWSSecretsManagerProvider,\n  hasAWSCredentials\n} from '../awsSecretsManager.js';\nimport { SecretManagerError } from '../errors.js';\n\n// Mock AWS SDK\nvi.mock('@aws-sdk/client-secrets-manager', () => {\n  const mockSend = vi.fn();\n  \n  return {\n    SecretsManagerClient: vi.fn().mockImplementation(() => ({\n      send: mockSend\n    })),\n    GetSecretValueCommand: vi.fn(),\n    CreateSecretCommand: vi.fn(),\n    UpdateSecretCommand: vi.fn(),\n    DeleteSecretCommand: vi.fn(),\n    DescribeSecretCommand: vi.fn(),\n    ResourceNotFoundException: class extends Error {\n      constructor(message: string) {\n        super(message);\n        this.name = 'ResourceNotFoundException';\n      }\n    },\n    InvalidRequestException: class extends Error {\n      constructor(message: string) {\n        super(message);\n        this.name = 'InvalidRequestException';\n      }\n    },\n    DecryptionFailureException: class extends Error {\n      constructor(message: string) {\n        super(message);\n        this.name = 'DecryptionFailureException';\n      }\n    }\n  };\n});\n\ndescribe('AWSSecretsManagerProvider', () => {\n  let provider: AWSSecretsManagerProvider;\n  let mockSend: any;\n  \n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Get the mock send function\n    const { SecretsManagerClient } = require('@aws-sdk/client-secrets-manager');\n    const clientInstance = new SecretsManagerClient();\n    mockSend = clientInstance.send;\n    \n    provider = new AWSSecretsManagerProvider({\n      region: 'us-east-1',\n      accessKeyId: 'test-key',\n      secretAccessKey: 'test-secret'\n    }, 'test/');\n  });\n\n  describe('getSecret', () => {\n    it('should retrieve a secret successfully', async () => {\n      // Arrange\n      mockSend.mockResolvedValue({\n        SecretString: 'secret-value'\n      });\n\n      // Act\n      const result = await provider.getSecret('database/password');\n\n      // Assert\n      expect(result).toBe('secret-value');\n      expect(mockSend).toHaveBeenCalledTimes(1);\n    });\n\n    it('should return null for non-existent secret', async () => {\n      // Arrange\n      const { ResourceNotFoundException } = require('@aws-sdk/client-secrets-manager');\n      mockSend.mockRejectedValue(new ResourceNotFoundException('Secret not found'));\n\n      // Act\n      const result = await provider.getSecret('non-existent');\n\n      // Assert\n      expect(result).toBeNull();\n    });\n\n    it('should handle binary secrets', async () => {\n      // Arrange\n      const binaryData = new TextEncoder().encode('binary-secret');\n      mockSend.mockResolvedValue({\n        SecretBinary: binaryData\n      });\n\n      // Act\n      const result = await provider.getSecret('binary-secret');\n\n      // Assert\n      expect(result).toBe('binary-secret');\n    });\n\n    it('should throw SecretManagerError for other errors', async () => {\n      // Arrange\n      const { DecryptionFailureException } = require('@aws-sdk/client-secrets-manager');\n      mockSend.mockRejectedValue(new DecryptionFailureException('Decryption failed'));\n\n      // Act & Assert\n      await expect(provider.getSecret('encrypted-secret')).rejects.toThrow(SecretManagerError);\n    });\n  });\n\n  describe('getSecrets', () => {\n    it('should retrieve multiple secrets', async () => {\n      // Arrange\n      mockSend\n        .mockResolvedValueOnce({ SecretString: 'value1' })\n        .mockResolvedValueOnce({ SecretString: 'value2' });\n\n      // Act\n      const result = await provider.getSecrets(['secret1', 'secret2']);\n\n      // Assert\n      expect(result).toEqual({\n        secret1: 'value1',\n        secret2: 'value2'\n      });\n    });\n\n    it('should handle partial failures gracefully', async () => {\n      // Arrange\n      const { ResourceNotFoundException } = require('@aws-sdk/client-secrets-manager');\n      mockSend\n        .mockResolvedValueOnce({ SecretString: 'value1' })\n        .mockRejectedValueOnce(new ResourceNotFoundException('Not found'));\n\n      // Act\n      const result = await provider.getSecrets(['secret1', 'secret2']);\n\n      // Assert\n      expect(result).toEqual({\n        secret1: 'value1'\n      });\n    });\n  });\n\n  describe('setSecret', () => {\n    it('should update existing secret', async () => {\n      // Arrange\n      mockSend.mockResolvedValue({});\n\n      // Act\n      await provider.setSecret('existing-secret', 'new-value');\n\n      // Assert\n      expect(mockSend).toHaveBeenCalledTimes(1);\n    });\n\n    it('should create new secret if not exists', async () => {\n      // Arrange\n      const { ResourceNotFoundException } = require('@aws-sdk/client-secrets-manager');\n      mockSend\n        .mockRejectedValueOnce(new ResourceNotFoundException('Not found'))\n        .mockResolvedValueOnce({});\n\n      // Act\n      await provider.setSecret('new-secret', 'value');\n\n      // Assert\n      expect(mockSend).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('deleteSecret', () => {\n    it('should delete secret with recovery window', async () => {\n      // Arrange\n      mockSend.mockResolvedValue({});\n\n      // Act\n      await provider.deleteSecret('secret-to-delete');\n\n      // Assert\n      expect(mockSend).toHaveBeenCalledTimes(1);\n    });\n\n    it('should force delete secret', async () => {\n      // Arrange\n      mockSend.mockResolvedValue({});\n\n      // Act\n      await provider.deleteSecret('secret-to-delete', true);\n\n      // Assert\n      expect(mockSend).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('secretExists', () => {\n    it('should return true for existing secret', async () => {\n      // Arrange\n      mockSend.mockResolvedValue({ Name: 'test/secret' });\n\n      // Act\n      const result = await provider.secretExists('secret');\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for non-existent secret', async () => {\n      // Arrange\n      const { ResourceNotFoundException } = require('@aws-sdk/client-secrets-manager');\n      mockSend.mockRejectedValue(new ResourceNotFoundException('Not found'));\n\n      // Act\n      const result = await provider.secretExists('non-existent');\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('testConnection', () => {\n    it('should return true for successful connection', async () => {\n      // Arrange\n      const { ResourceNotFoundException } = require('@aws-sdk/client-secrets-manager');\n      mockSend.mockRejectedValue(new ResourceNotFoundException('Expected'));\n\n      // Act\n      const result = await provider.testConnection();\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for connection failure', async () => {\n      // Arrange\n      mockSend.mockRejectedValue(new Error('Network error'));\n\n      // Act\n      const result = await provider.testConnection();\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getConfig', () => {\n    it('should return configuration', () => {\n      // Act\n      const config = provider.getConfig();\n\n      // Assert\n      expect(config).toMatchObject({\n        region: 'us-east-1',\n        secretPrefix: 'test/'\n      });\n    });\n  });\n});\n\ndescribe('createAWSSecretsManagerProvider', () => {\n  let originalEnv: NodeJS.ProcessEnv;\n\n  beforeEach(() => {\n    originalEnv = { ...process.env };\n  });\n\n  afterEach(() => {\n    process.env = originalEnv;\n  });\n\n  it('should create provider with environment variables', () => {\n    // Arrange\n    process.env.AWS_REGION = 'us-west-2';\n    process.env.AWS_ACCESS_KEY_ID = 'env-key';\n    process.env.AWS_SECRET_ACCESS_KEY = 'env-secret';\n    process.env.AWS_SECRETS_PREFIX = 'myapp/';\n\n    // Act\n    const provider = createAWSSecretsManagerProvider();\n\n    // Assert\n    const config = provider.getConfig();\n    expect(config.region).toBe('us-west-2');\n    expect(config.secretPrefix).toBe('myapp/');\n  });\n\n  it('should use custom config over environment', () => {\n    // Arrange\n    process.env.AWS_REGION = 'us-west-2';\n    \n    // Act\n    const provider = createAWSSecretsManagerProvider({\n      region: 'eu-west-1'\n    }, 'custom/');\n\n    // Assert\n    const config = provider.getConfig();\n    expect(config.region).toBe('eu-west-1');\n    expect(config.secretPrefix).toBe('custom/');\n  });\n});\n\ndescribe('hasAWSCredentials', () => {\n  let originalEnv: NodeJS.ProcessEnv;\n\n  beforeEach(() => {\n    originalEnv = { ...process.env };\n    // Clear AWS-related env vars\n    delete process.env.AWS_ACCESS_KEY_ID;\n    delete process.env.AWS_SECRET_ACCESS_KEY;\n    delete process.env.AWS_PROFILE;\n    delete process.env.AWS_ROLE_ARN;\n    delete process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI;\n    delete process.env.AWS_CONTAINER_CREDENTIALS_FULL_URI;\n  });\n\n  afterEach(() => {\n    process.env = originalEnv;\n  });\n\n  it('should return true for access key credentials', () => {\n    // Arrange\n    process.env.AWS_ACCESS_KEY_ID = 'test-key';\n    process.env.AWS_SECRET_ACCESS_KEY = 'test-secret';\n\n    // Act & Assert\n    expect(hasAWSCredentials()).toBe(true);\n  });\n\n  it('should return true for profile credentials', () => {\n    // Arrange\n    process.env.AWS_PROFILE = 'default';\n\n    // Act & Assert\n    expect(hasAWSCredentials()).toBe(true);\n  });\n\n  it('should return true for role credentials', () => {\n    // Arrange\n    process.env.AWS_ROLE_ARN = 'arn:aws:iam::123456789012:role/MyRole';\n\n    // Act & Assert\n    expect(hasAWSCredentials()).toBe(true);\n  });\n\n  it('should return true for container credentials', () => {\n    // Arrange\n    process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = '/v2/credentials/uuid';\n\n    // Act & Assert\n    expect(hasAWSCredentials()).toBe(true);\n  });\n\n  it('should return false when no credentials available', () => {\n    // Act & Assert\n    expect(hasAWSCredentials()).toBe(false);\n  });\n});\n"