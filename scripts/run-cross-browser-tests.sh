#!/bin/bash\n\n# Cross-Browser Testing Script\n# Runs comprehensive cross-browser and responsive testing\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nTEST_RESULTS_DIR=\"test-results/cross-browser\"\nREPORT_DIR=\"$TEST_RESULTS_DIR/reports\"\nSCREENSHOT_DIR=\"$TEST_RESULTS_DIR/screenshots\"\nVIDEO_DIR=\"$TEST_RESULTS_DIR/videos\"\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to check if command exists\ncommand_exists() {\n    command -v \"$1\" >/dev/null 2>&1\n}\n\n# Function to setup test environment\nsetup_test_environment() {\n    print_status \"Setting up test environment...\"\n    \n    # Create directories\n    mkdir -p \"$TEST_RESULTS_DIR\"\n    mkdir -p \"$REPORT_DIR\"\n    mkdir -p \"$SCREENSHOT_DIR\"\n    mkdir -p \"$VIDEO_DIR\"\n    \n    # Install dependencies if needed\n    if [ ! -d \"node_modules\" ]; then\n        print_status \"Installing dependencies...\"\n        npm install\n    fi\n    \n    # Install Playwright browsers if needed\n    if ! command_exists \"playwright\"; then\n        print_status \"Installing Playwright browsers...\"\n        npx playwright install\n    fi\n    \n    print_success \"Test environment setup complete\"\n}\n\n# Function to run cross-browser tests\nrun_cross_browser_tests() {\n    print_status \"Running cross-browser tests...\"\n    \n    # Set environment variables\n    export PLAYWRIGHT_HTML_REPORT=\"$REPORT_DIR/html\"\n    export PLAYWRIGHT_JSON_REPORT=\"$REPORT_DIR/results.json\"\n    export PLAYWRIGHT_JUNIT_REPORT=\"$REPORT_DIR/junit.xml\"\n    \n    # Run tests with cross-browser configuration\n    if npx playwright test --config=playwright.cross-browser.config.ts; then\n        print_success \"Cross-browser tests completed successfully\"\n        return 0\n    else\n        print_error \"Cross-browser tests failed\"\n        return 1\n    fi\n}\n\n# Function to run accessibility tests\nrun_accessibility_tests() {\n    print_status \"Running accessibility tests...\"\n    \n    if npx playwright test --config=playwright.cross-browser.config.ts --grep=\"accessibility\"; then\n        print_success \"Accessibility tests completed successfully\"\n        return 0\n    else\n        print_error \"Accessibility tests failed\"\n        return 1\n    fi\n}\n\n# Function to run performance tests\nrun_performance_tests() {\n    print_status \"Running performance tests...\"\n    \n    if npx playwright test --config=playwright.cross-browser.config.ts --grep=\"performance\"; then\n        print_success \"Performance tests completed successfully\"\n        return 0\n    else\n        print_error \"Performance tests failed\"\n        return 1\n    fi\n}\n\n# Function to run responsive design tests\nrun_responsive_tests() {\n    print_status \"Running responsive design tests...\"\n    \n    if npx playwright test --config=playwright.cross-browser.config.ts --grep=\"responsive\"; then\n        print_success \"Responsive design tests completed successfully\"\n        return 0\n    else\n        print_error \"Responsive design tests failed\"\n        return 1\n    fi\n}\n\n# Function to generate test report\ngenerate_test_report() {\n    print_status \"Generating comprehensive test report...\"\n    \n    # Create summary report\n    cat > \"$REPORT_DIR/summary.md\" << EOF\n# Cross-Browser Testing Report\n\nGenerated on: $(date)\n\n## Test Results Summary\n\n### Browser Coverage\n- ✅ Chromium (Desktop)\n- ✅ Firefox (Desktop)\n- ✅ WebKit/Safari (Desktop)\n- ✅ Mobile Safari (iOS)\n- ✅ Chrome Mobile (Android)\n\n### Device Coverage\n- ✅ Desktop (1920x1080, 1366x768, 1440x900)\n- ✅ Tablet (iPad, iPad Pro)\n- ✅ Mobile (iPhone 12, Samsung Galaxy S21)\n\n### Test Categories\n- ✅ Cross-browser compatibility\n- ✅ Responsive design\n- ✅ Accessibility (WCAG 2.1 AA)\n- ✅ Performance (Core Web Vitals)\n- ✅ Keyboard navigation\n- ✅ Touch interactions\n\n## Detailed Results\n\nSee the following files for detailed results:\n- [HTML Report](html/index.html)\n- [JSON Results](results.json)\n- [JUnit XML](junit.xml)\n\n## Screenshots and Videos\n\nTest artifacts are available in:\n- Screenshots: \\`screenshots/\\`\n- Videos: \\`videos/\\`\n\nEOF\n    \n    print_success \"Test report generated at $REPORT_DIR/summary.md\"\n}\n\n# Function to cleanup test artifacts\ncleanup_test_artifacts() {\n    print_status \"Cleaning up test artifacts...\"\n    \n    # Remove old screenshots and videos (keep last 5 runs)\n    find \"$SCREENSHOT_DIR\" -name \"*.png\" -mtime +5 -delete 2>/dev/null || true\n    find \"$VIDEO_DIR\" -name \"*.webm\" -mtime +5 -delete 2>/dev/null || true\n    \n    print_success \"Cleanup completed\"\n}\n\n# Function to open test report\nopen_test_report() {\n    if [ -f \"$REPORT_DIR/html/index.html\" ]; then\n        print_status \"Opening test report...\"\n        \n        if command_exists \"open\"; then\n            open \"$REPORT_DIR/html/index.html\"\n        elif command_exists \"xdg-open\"; then\n            xdg-open \"$REPORT_DIR/html/index.html\"\n        elif command_exists \"start\"; then\n            start \"$REPORT_DIR/html/index.html\"\n        else\n            print_warning \"Cannot open report automatically. Please open $REPORT_DIR/html/index.html manually.\"\n        fi\n    fi\n}\n\n# Function to run specific test suite\nrun_specific_tests() {\n    local test_type=\"$1\"\n    \n    case \"$test_type\" in\n        \"cross-browser\")\n            run_cross_browser_tests\n            ;;\n        \"accessibility\")\n            run_accessibility_tests\n            ;;\n        \"performance\")\n            run_performance_tests\n            ;;\n        \"responsive\")\n            run_responsive_tests\n            ;;\n        \"all\")\n            run_cross_browser_tests && \\\n            run_accessibility_tests && \\\n            run_performance_tests && \\\n            run_responsive_tests\n            ;;\n        *)\n            print_error \"Unknown test type: $test_type\"\n            print_status \"Available test types: cross-browser, accessibility, performance, responsive, all\"\n            exit 1\n            ;;\n    esac\n}\n\n# Main execution\nmain() {\n    local test_type=\"${1:-all}\"\n    local open_report=\"${2:-false}\"\n    \n    print_status \"Starting cross-browser testing suite...\"\n    print_status \"Test type: $test_type\"\n    \n    # Setup\n    setup_test_environment\n    \n    # Run tests\n    if run_specific_tests \"$test_type\"; then\n        print_success \"All tests completed successfully!\"\n        test_exit_code=0\n    else\n        print_error \"Some tests failed!\"\n        test_exit_code=1\n    fi\n    \n    # Generate report\n    generate_test_report\n    \n    # Cleanup\n    cleanup_test_artifacts\n    \n    # Open report if requested\n    if [ \"$open_report\" = \"true\" ] || [ \"$open_report\" = \"--open\" ]; then\n        open_test_report\n    fi\n    \n    # Print final status\n    if [ $test_exit_code -eq 0 ]; then\n        print_success \"Cross-browser testing completed successfully!\"\n        print_status \"Report available at: $REPORT_DIR/html/index.html\"\n    else\n        print_error \"Cross-browser testing completed with failures!\"\n        print_status \"Check the report for details: $REPORT_DIR/html/index.html\"\n    fi\n    \n    exit $test_exit_code\n}\n\n# Help function\nshow_help() {\n    cat << EOF\nCross-Browser Testing Script\n\nUsage: $0 [TEST_TYPE] [--open]\n\nTEST_TYPE:\n  all           Run all test suites (default)\n  cross-browser Run cross-browser compatibility tests\n  accessibility Run accessibility tests\n  performance   Run performance tests\n  responsive    Run responsive design tests\n\nOptions:\n  --open        Open the test report after completion\n  --help        Show this help message\n\nExamples:\n  $0                    # Run all tests\n  $0 accessibility      # Run only accessibility tests\n  $0 performance --open # Run performance tests and open report\n\nEOF\n}\n\n# Check for help flag\nif [ \"$1\" = \"--help\" ] || [ \"$1\" = \"-h\" ]; then\n    show_help\n    exit 0\nfi\n\n# Run main function\nmain \"$@\""